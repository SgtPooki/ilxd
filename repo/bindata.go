// Code generated by go-bindata.
// sources:
// sample-ilxd.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleIlxdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\x31\x0f\xbb\xc0\x1d\x90\xf3\xb7\x1d\xa5\x3e\x1f\xe0\x7e\xdc\xa2\x7b\xd9\x8d\xd1\xa4\x1f\xd7\x97\xc5\x88\x1c\x49\xac\x29\x52\x21\x29\xdb\xca\xe1\xfa\xb7\x1f\x86\x92\x1c\xa7\x4d\x0f\x8b\x3c\xd4\x1a\x0e\x7f\xc3\xf9\xcd\x67\x57\x70\x57\x10\x48\xe5\x48\x04\xeb\x1a\x08\x16\x7c\xb0\x8e\x40\x62\x40\xf0\xb5\x28\x00\x3d\x84\x82\xc0\xa6\xc7\x28\x4c\xd1\xd3\x70\xd0\xdd\xa3\x0c\x6b\x1d\x40\x79\xf8\x3a\x1a\xb2\x86\x35\xb0\xbd\xb9\x7d\xfb\x09\x6e\x6e\xc9\x5f\xc0\x4f\xd7\x37\xaf\x36\xd7\x9b\xed\xf6\xf5\xe6\x6e\x33\xea\x14\x3e\x2a\x23\xed\xc1\x5f\x0c\x56\xf0\x75\x74\xad\x52\x87\xae\x19\x6d\xaa\x4a\x2b\x81\x41\x59\x03\xb7\x75\x55\x59\x17\x7a\xfd\xdf\x50\xc0\xcd\xed\x05\xa0\x91\xf0\x53\x61\x4b\xea\x0e\x06\x2b\xd8\x6a\x34\x57\x43\x80\x37\x66\xaf\x9c\x35\x25\x99\x00\x7b\x74\x0a\x53\x4d\x1e\xd0\x11\xd0\xb1\x42\x23\x49\x82\xb7\xec\x46\x03\x25\x36\x90\x12\xd4\x9e\xe4\x10\xe0\xf7\x9b\xbb\x37\x2f\xfa\x17\x0d\x56\x40\x3f\x04\x0a\x4d\xa5\x04\x6a\xdd\xc0\xcf\x1f\x36\xef\xde\x6e\x5e\x5e\xbf\xf9\xf9\x02\xd2\x3a\x74\xb0\xb5\x0f\x8c\x8b\x42\x90\xf7\x24\xe1\xa0\x42\x31\x58\xc1\x4f\xbd\x32\x14\xe4\x68\x08\xb0\xd1\xde\x5e\xc0\x57\xe6\xec\xf4\xb6\x60\x9f\x32\x75\xc6\x12\x53\xcd\xb4\x4b\xe5\xd6\x5f\x47\x43\xa5\x8f\x72\x30\x58\xc1\x7b\x4f\x10\xc8\x07\x43\x81\x35\xba\x9f\xeb\x49\x7f\xe6\x28\x67\x19\x9f\x75\x3f\xdb\xb3\xb7\x19\x84\x42\x79\xb0\x55\x64\x5a\xf9\x48\x04\xdb\xcb\x94\xf3\x01\x7c\x40\x17\xea\x0a\x0e\x05\x19\xa8\xbd\x32\x79\x7f\x1f\x4a\x2b\x89\x7d\x35\x60\xac\xa4\xc1\x0a\x0e\x4a\x6b\xbe\x1e\xd3\xa3\xd7\xca\xc9\x90\x57\x1e\xf6\xa8\x95\xc4\x60\x1d\x18\x0a\x07\xeb\x76\xb0\xa3\x26\x86\xf0\x80\x5a\x53\xe0\xcf\xe8\xdc\x4d\x28\xc8\x1d\x94\x27\x50\xe1\x11\xd2\xa1\x91\xb6\x3c\x29\x75\xe8\x7b\xd4\x9d\x8b\x46\xed\xc9\x79\xd4\xb0\xd5\x75\x1e\x61\xb7\x1a\x1b\xf8\xcb\xfb\xad\xd9\xfe\x15\xb0\x0e\xb6\xc4\xd0\xc5\xcb\x56\x64\xda\x1c\xd6\xca\x07\x32\xc0\xc9\x05\x36\x0d\xa8\x0c\xc7\x9c\x4f\xe8\x18\xc8\x19\xd4\xf0\x76\x0b\x28\xa5\x23\xef\x21\x73\xb6\x04\xdf\xe6\x22\x49\x90\xb4\x57\x82\xfc\x10\xee\xce\x08\x94\xca\xb7\x29\xa2\x22\xd7\xc6\xd6\x95\xa9\xda\x37\xde\x12\xc9\x1e\xab\xcb\xa1\xc8\x75\xb0\xf0\xc5\x2a\x13\xcd\x76\xdc\x0c\xe1\xc6\xb4\xd4\xb7\x52\x66\x3a\x52\x51\xe2\x8e\x99\xb6\x75\xc8\x2d\xc7\x42\x58\x63\x48\xb0\x65\xcf\x38\xac\x9c\x5a\x1b\x7c\x70\x58\x41\x45\xe4\x7c\xe4\xa2\x0b\x4a\xc9\x3a\x52\x79\x61\xf7\xe4\xc0\x32\xd1\x83\x55\xa7\xf6\xcd\x03\x06\x2b\xf0\x44\x92\x9f\xbb\x1e\xa9\x6a\x3e\x3a\x0e\xe3\xdf\x28\x88\x6a\x74\x35\x1e\x4f\x46\xd5\xb4\x1a\x4d\xa6\xaf\x67\xff\xb2\xf6\xe3\xf6\xf3\xec\xf8\xf2\xf7\x77\xbf\x1c\xe7\x59\xf1\x2e\xcd\xfe\xbd\x11\x9f\xde\x17\xe2\x73\x71\xf7\x79\x7a\xfd\x6a\xf7\xeb\xe5\x7c\xf7\xeb\xa7\x5f\xb2\x87\xab\xbb\x0f\xd7\x77\x4c\xc5\x75\xcb\xfb\x53\x32\xd8\xfc\x99\xc4\x48\xa8\x9c\x0d\x56\x58\xed\x4f\x44\x75\x01\xcb\xac\x03\x65\x84\x2d\x95\xc9\x99\xe5\x2e\xa3\xce\xd8\x60\x07\x5a\xe5\x47\x17\xc6\xc3\xf8\x77\x72\xe1\x3b\x95\xe5\xe8\xc5\x8b\x1f\x9f\x3e\x02\xd4\xb2\xe3\xe0\xbe\x56\xe2\x79\x94\xa7\x2a\x31\xfa\x01\x10\x44\xed\x83\x2d\xd9\x1d\x07\x98\x73\x53\xf1\xc1\xb5\x4e\xb0\x2c\x8a\xd6\xaf\xa2\xd2\x1f\xef\x3d\xb9\x3f\x36\x2c\xe1\xfb\xaf\x29\xad\x73\xd0\x36\xcf\x39\xee\x9a\xf6\xa4\xd9\xc7\x0f\x5c\x56\xed\x67\xcb\xe2\x7f\x24\x2b\x5e\x80\x32\x99\xbd\x00\x63\x83\x12\x74\x01\x07\x74\x46\x99\xfc\x02\xc8\x39\xeb\x2e\x40\x38\x15\xab\xe1\xbf\xfc\x7a\x9b\xc7\xfb\x6b\xbe\x32\x18\xfc\x70\x02\x68\x9b\x43\xa6\x34\xf9\xf6\xce\x59\x03\x1a\x69\x9b\xfb\xff\x73\x93\x23\xdb\x55\xb9\x4c\xb9\x51\xc4\xdf\xe7\x00\xad\x84\x21\x3e\x3a\x15\xb8\x30\xd3\x6a\x5a\xb1\x99\x53\x5e\x07\x72\xa5\x32\xa8\xb9\xff\xb1\x8b\x6d\x51\xbd\x6e\xeb\xad\xd5\x70\x68\x3c\x8a\xb6\x91\x19\x49\xc7\x58\x80\xe1\x18\x7f\x77\xea\xa4\x29\x74\xda\xc7\x93\x92\x74\xb6\x7a\xa2\xc6\x7e\x94\x78\x84\x14\xb9\x2a\x1c\xf9\xc2\x6a\x39\x84\x9b\x3d\xb9\x43\xa1\x44\x11\x2b\xd2\xb7\x25\x99\x12\xab\x19\x92\x1c\x8e\x12\x8f\x29\x1a\x2f\xac\xa3\xf5\x64\x3c\x66\xac\x0d\x94\x86\x4a\x6b\x94\x88\x15\xc5\xee\x70\x39\x72\x0a\xc7\xce\xcb\x50\x4f\x7b\x48\x3f\x3a\x9e\xed\xc4\x6c\xe5\xa5\x0d\xc5\x79\xb5\x3e\xd7\x4a\x4f\x8f\x93\xe4\xd4\x9e\x64\xdb\xbd\xa2\x45\x7e\xc6\xf0\x14\x06\xfe\x5a\x97\x28\x0a\x65\x08\xec\xc1\x70\x67\xd8\xa3\x86\xbd\x6d\x30\x27\x9e\x52\x16\x2a\xa7\x24\xb5\x74\x81\x43\xb1\x03\x69\xb5\x86\x4a\xa3\xa1\x00\xce\xd6\x81\xa0\x36\x78\xe0\xfc\xf3\xb5\xdb\x53\x03\x02\x4d\x63\x0d\x78\x42\x27\x0a\x28\x95\xd6\xec\x19\x95\xa9\x43\x41\x50\xd9\x03\xb1\xfb\x75\x99\x42\x6e\x31\x80\x24\xaf\x72\x03\x8e\xb9\xcd\x1d\xa6\xe0\x8a\x26\x14\x65\x1f\x0b\x2c\x6d\x6d\x02\xd8\x0c\x82\x2a\x89\x29\xe4\xc8\xb4\x41\xc8\x2c\x37\xb1\x14\x8d\xac\x5d\x5c\x17\xd6\xd3\x79\xc1\x17\x7f\x53\x46\x95\x75\x09\x19\x11\x54\xe4\x60\xa7\xb4\x4d\x9b\xd0\x52\xef\x48\x63\xc3\x95\x74\x96\x34\x6d\xd3\x49\xb5\x15\x3b\xa8\x1c\x65\xe4\xc8\x08\x6e\xb7\xa5\x32\x19\x51\x45\xae\x87\xe0\xd8\xb6\xd1\xed\x8d\xf8\x80\xbb\xd3\x3b\x7f\x6c\xa0\x55\xfb\x93\x36\xa3\x72\x6b\xaa\x4b\xa5\x53\xcb\x8c\xb5\x45\x46\x82\xb0\xca\xf0\x06\x06\x8e\x0e\xe8\x24\x1f\x0c\x9f\x19\xea\xc6\x86\x98\x4e\x83\x15\x20\x17\x47\x20\x87\xba\x4f\x97\x1e\xb3\xcf\x98\x98\x77\x69\xd3\x6f\x73\x9c\x2a\xbd\x99\xd8\xe3\x1c\xe5\x93\x6a\x5f\x1f\x9d\xf7\xe1\x78\x2f\x1a\x5a\x54\x0f\x58\x5f\x1d\xa6\x97\xc5\x7c\x9a\xd7\xbb\xfb\x2f\x65\xb5\x4f\xee\xe9\x81\x92\xc4\xa0\x34\xf7\xd9\xfc\x78\x4c\xe6\x58\x3b\xff\x25\x5f\xde\xcb\xe5\x38\xd9\xeb\xe3\x4e\x38\x89\x97\x0f\xcd\x43\x59\x17\x87\xe6\xe1\x58\x2f\xee\x97\x5f\x16\x7e\x9e\x14\x41\x2c\xc7\xf7\xe3\xe5\x22\xab\x17\x42\xee\x0b\x73\x7f\x15\xf3\xc0\x11\xfa\x9a\xdb\xca\x39\x7b\xc1\xc2\xa1\x50\x81\xb8\x05\xf3\xe8\xee\x94\x4e\xb2\x75\x2a\xd3\xe9\xec\x32\xcd\x12\xb1\x90\xb4\x4c\x97\xe3\x14\x27\x34\x95\x22\xa3\xd9\x72\x9e\x89\xe9\x3c\x5b\x24\x33\x5a\x2c\x13\x39\x59\x26\xd3\x2c\x59\x4c\xf0\x4a\x8e\xb3\xc9\x04\xe7\x0b\x71\x99\xc8\x67\x41\x69\x3c\x49\x66\x09\x2d\xe5\x78\x82\x02\x17\x93\x4b\xbc\xcc\x92\xc5\x2c\x9d\x5f\x09\x39\x9d\xc9\xf1\x78\xbe\xb8\x9a\xa6\xcb\x65\x32\x59\x4e\x66\x72\x91\xe0\x12\xaf\x70\xb9\x94\x62\x39\x1b\x5f\x8e\x67\x62\xf0\xcd\xbe\x1c\xe3\xef\xd5\x03\x81\xb7\x59\x00\xad\x4a\xc5\xde\x9c\xc4\x2c\x8d\xc2\xf5\x64\x3c\x4f\x16\x97\xcb\x6f\x01\x4a\x3c\xb6\x69\xc8\x18\xd9\xd9\x92\x55\x92\xf7\x98\xc7\x9e\x5d\xe2\xb1\xff\x52\x0f\xb4\x4e\x66\x49\xb2\x1c\x27\x71\x36\x55\x24\x54\xd6\xc4\x96\x92\xbf\xdb\xbe\x6a\x13\x24\xe3\x4a\x8d\x63\x98\xd7\xa3\xc7\xe1\xcb\x19\x95\x41\x63\x6b\x38\xa0\x09\x7d\x3f\x3b\xdd\xdd\x6c\xdf\x72\xc6\xe4\xae\x12\xed\x85\xef\x87\xef\x82\xc7\x6b\x97\xcf\x35\x6f\x90\xa1\xdf\xf4\x83\xdd\x75\xe3\xfd\x1c\x8f\x6d\x9c\x29\x12\x08\xad\xc8\x04\xdf\xdb\xe1\xb3\x78\x73\xfd\xf7\xf8\xcf\x3f\x18\xfc\x9f\x4a\x13\x6f\x04\xbc\xd5\xc5\x3a\x2c\x08\x04\xb9\xa0\xb2\x16\x83\x47\x19\x6f\x92\x95\x60\xe9\x69\x12\xb9\x4a\x0c\x59\xf0\x67\x20\x76\xd4\xb4\x08\x3b\x6a\x9e\x00\xf0\x41\x8c\xd0\x63\x11\xfa\xc2\xd6\x5a\x9e\xca\x8b\xeb\xf7\x8c\xf5\xe7\xd6\x4d\x95\x75\x0b\x77\x5c\x8c\xea\x60\xff\xc6\xbb\xb4\x43\xde\x3d\x6f\x6f\xaf\xcf\x5f\x32\x7c\x76\x93\xef\x8b\xbe\x5d\xde\xfb\xc7\xf3\xc9\x23\x50\xbf\x63\x6b\xb5\x23\x1d\xff\x23\xc4\xd9\xce\x27\xc8\x3b\x61\xdc\xda\x19\xbd\x7f\xa0\xaa\xd6\x93\xe9\x65\x8c\xe5\x77\xf3\x37\xae\xa9\xae\xe2\x39\xe7\x78\x35\xe6\xc9\xda\x1e\xc7\x4e\xdd\x0a\xbf\x1f\xdb\x5d\x17\x7a\xf6\x62\x3f\xa2\xfa\xab\xff\x0b\x00\x00\xff\xff\x1b\x02\x2b\x3c\x9f\x0e\x00\x00")

func sampleIlxdConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleIlxdConf,
		"sample-ilxd.conf",
	)
}

func sampleIlxdConf() (*asset, error) {
	bytes, err := sampleIlxdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-ilxd.conf", size: 3743, mode: os.FileMode(436), modTime: time.Unix(1687019965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-ilxd.conf": sampleIlxdConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-ilxd.conf": &bintree{sampleIlxdConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
