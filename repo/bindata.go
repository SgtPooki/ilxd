// Code generated by go-bindata.
// sources:
// sample-ilxd.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleIlxdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\x0f\x77\x68\x0b\xa4\xb6\x24\xdb\xb2\x7c\xa9\x0b\xf8\x76\xb7\x87\x5c\x73\x17\x63\x93\xfd\xe8\xbe\x1c\x28\x72\x24\x71\x4d\x91\x0a\x49\xf9\x23\x45\xf7\x6f\x2f\x86\x92\x1c\x67\x93\x5d\x1c\xf2\x10\x8b\x1c\xfe\x66\xe6\xc7\xf9\xe2\x25\xdc\x55\x08\x42\x5a\xe4\xde\xd8\x23\x78\x03\xce\x1b\x8b\x20\x98\x67\xe0\x5a\x5e\x01\x73\xe0\x2b\x04\x93\x1f\xc2\x62\xce\x1c\x8e\x47\xfd\x39\x2c\x58\xab\x3c\x48\x07\x5f\x26\x63\x92\x30\x1a\x36\x37\xb7\x57\x1f\xe1\xe6\x16\xdd\x05\xfc\x70\x7d\xf3\x6a\x7d\xbd\xde\x6c\x5e\xaf\xef\xd6\x93\x5e\xe0\x83\xd4\xc2\xec\xdd\xc5\xe8\x12\xbe\x4c\xae\x65\x6e\x99\x3d\x4e\xd6\x4d\xa3\x24\x67\x5e\x1a\x0d\xb7\x6d\xd3\x18\xeb\x07\xf9\xdf\x18\x87\x9b\xdb\x0b\x60\x5a\xc0\x0f\x95\xa9\xb1\xdf\x18\x5d\xc2\x46\x31\xbd\x1c\x03\xbc\xd1\x3b\x69\x8d\xae\x51\x7b\xd8\x31\x2b\x59\xae\xd0\x01\xb3\x08\x78\x68\x98\x16\x28\xc0\x19\x72\xe3\x08\x35\x3b\x42\x8e\xd0\x3a\x14\x63\x80\xdf\x6f\xee\xde\xfc\x34\x58\x34\xba\x04\xfc\x26\x90\x3f\x36\x92\x33\xa5\x8e\xf0\xe3\xfb\xf5\xdb\xab\xf5\xcf\xd7\x6f\x7e\xbc\x80\xbc\xf5\x3d\x6c\xeb\x3c\xe1\x32\xce\xd1\x39\x14\xb0\x97\xbe\x1a\x5d\xc2\x0f\x83\x30\x54\x68\x71\x0c\xb0\x56\xce\x5c\xc0\x17\xe2\xec\x64\x9b\x37\x4f\x99\x3a\x63\x89\xa8\x26\xda\x85\xb4\xab\x2f\x93\xb1\x54\x07\x31\x1a\x5d\xc2\x3b\x87\xe0\xd1\x79\x8d\x9e\x24\xfa\x9f\xab\x78\xd8\xb3\x58\xd2\x1a\xed\xf5\x3f\xbb\xbd\xab\x02\x7c\x25\x1d\x98\x26\x30\x2d\x5d\x20\x82\xf4\x15\xd2\x3a\x0f\xce\x33\xeb\xdb\x06\xf6\x15\x6a\x68\x9d\xd4\xe5\x70\x1e\x6a\x23\x90\x7c\xd5\xa0\x8d\xc0\xd1\x25\xec\xa5\x52\x74\x3c\x84\xc7\x20\x55\xa2\x46\x27\x1d\xec\x98\x92\x82\x79\x63\x41\xa3\xdf\x1b\xbb\x85\x2d\x1e\xc3\x15\xee\x99\x52\xe8\xe9\x33\x38\x77\xe3\x2b\xb4\x7b\xe9\x10\xa4\x7f\x84\xb4\x4c\x0b\x53\x9f\x84\x7a\xf4\x1d\x53\xbd\x8b\x5a\xee\xd0\x3a\xa6\x60\xa3\xda\x32\xc0\x6e\x14\x3b\xc2\x5f\xdf\x6d\xf4\xe6\x6f\xc0\x5a\x6f\x6a\xe6\xfb\xfb\x32\x0d\xea\x2e\x86\x95\x74\x1e\x35\x50\x70\x81\xc9\x3d\x93\x9a\xee\x9c\x76\xf0\xe0\xd1\x6a\xa6\xe0\x6a\x03\x4c\x08\x8b\xce\x41\x61\x4d\x0d\xae\x8b\x45\x14\x20\x70\x27\x39\xba\x31\xdc\x9d\x11\x28\xa4\xeb\x42\x44\x06\xae\xb5\x69\x1b\xdd\x74\x36\xde\x22\x8a\x01\xab\x8f\xa1\xc0\xb5\x37\xf0\xd9\x48\x1d\xd4\xf6\xdc\x8c\xe1\x46\x77\xd4\x77\xab\xc4\x74\xa0\xa2\x66\x5b\x62\xda\xb4\xbe\x34\x74\x17\xdc\x68\x8d\x9c\x34\x3b\xc2\x21\xe1\xdc\x18\xef\xbc\x65\x0d\x34\x88\xd6\x05\x2e\xfa\x4b\xa9\x49\x46\x48\xc7\xcd\x0e\x2d\x18\x22\x7a\x74\xd9\x8b\x7d\x65\xc0\xe8\x12\x1c\xa2\x20\x73\x57\x13\xd9\xcc\x26\x87\x71\xf8\x9b\x78\xde\x4c\x96\x51\x14\x4f\x9a\xa4\x99\xc4\xc9\xeb\xe9\xbf\x8d\xf9\xb0\xf9\x34\x3d\xfc\xfc\xfb\xdb\x5f\x0e\xb3\xa2\x7a\x9b\x17\xff\x59\xf3\x8f\xef\x2a\xfe\xa9\xba\xfb\x94\x5c\xbf\xda\xfe\xba\x98\x6d\x7f\xfd\xf8\x4b\xf1\xb0\xbc\x7b\x7f\x7d\x47\x54\x5c\x77\xbc\x3f\x25\x83\xd4\x9f\xad\x68\x01\x8d\x35\xde\x70\xa3\xdc\x89\xa8\xfe\xc2\x0a\x63\x41\x6a\x6e\x6a\xa9\x4b\x62\xb9\x8f\xa8\x33\x36\xc8\x81\x4e\xf8\xd1\x85\x68\x1c\xfe\x4e\x2e\x3c\x13\x49\x27\x3f\xfd\xf4\xed\xdd\x47\x80\x56\xf4\x1c\xdc\xb7\x92\xbf\x8c\xf2\x54\x24\xdc\xbe\x07\x06\xbc\x75\xde\xd4\xe4\x8e\x05\x56\x52\x51\x71\xde\x76\x4e\xd0\x5a\x58\x5a\xbd\x0a\x42\x7f\xbc\x73\x68\xff\x58\xd3\x0a\x9d\x7f\x8d\x79\x5b\x82\x32\x65\x49\xf7\xae\x70\x87\x8a\x7c\x7c\x4f\x69\xd5\x7d\x76\x2c\xfe\x57\x90\xe0\x05\x48\x5d\x98\x0b\xd0\xc6\x4b\x8e\x17\xb0\x67\x56\x4b\x5d\x5e\x00\x5a\x6b\xec\x05\x70\x2b\x43\x36\xfc\x8f\xac\x37\x65\x38\xbf\xa2\x23\xa3\xd1\x37\x3b\x80\x32\x25\x14\x52\xa1\xeb\xce\x9c\x15\xa0\x89\x32\xa5\xfb\xce\x49\xba\xd9\x3e\xcb\x45\x4e\x85\x22\xfc\x3e\x07\xe8\x56\x08\xe2\x83\x95\x9e\x12\x33\x6f\x92\x86\xd4\x9c\xe2\xda\xa3\xad\xa5\x66\x8a\xea\x1f\xb9\xd8\x25\xd5\x6b\x54\xe8\x3b\x0d\xb9\x32\x7c\xcb\x2b\x26\x75\x97\xa9\x42\xba\xed\xd0\x98\x1e\x33\xa8\xb3\xe8\x33\x55\x67\x3a\x24\x98\xa7\xa0\xc7\xbe\xea\xf6\x55\x8a\x96\xf6\x1d\x60\x88\xa4\xc6\xb6\x1a\x7b\x85\x5d\x82\x77\x26\x59\xa6\x1d\xe3\x5d\xe5\xd4\x02\x0f\x21\xe3\xfd\x21\xfc\x7e\x66\x9f\x3f\x9c\x84\x84\x35\xcd\x13\xb1\x37\xfa\x04\xda\x13\xe5\xd0\x52\x92\x06\x99\xc0\x24\x7d\x83\x22\x72\x3a\x09\xba\x86\xbd\x7b\x59\xd5\x4b\x18\x81\x93\xde\xe5\xd0\xb4\x7b\x3b\x9e\x60\x10\x57\x35\x3b\x40\xce\xa8\x1c\x58\x74\x95\x51\x62\x0c\x37\x3b\xb4\xfb\x4a\xf2\x2a\x10\xe9\x3a\x26\x73\x24\x31\x8d\x82\x18\xaa\xd9\x21\x67\xda\x71\x63\x71\x15\x47\x11\x61\xad\xa1\xd6\x58\x1b\x2d\x79\x28\x25\xe4\x04\xd5\x21\xca\xdd\xd0\x72\x08\xea\x69\xf1\x1c\x7a\xe6\x8b\x2d\x88\xb4\xfc\x6c\x7c\x75\x5e\xa6\x5e\xea\x21\x27\xe3\x04\x5a\xb9\x43\x31\x38\x2e\x5d\x30\x63\x7c\x8a\x3f\xfa\x5a\xd5\x8c\x57\x52\x23\x98\xbd\xa6\x92\xb8\x63\x0a\x76\xe6\xc8\x4a\xa4\xf6\x6c\xa0\xb1\x52\x60\x4f\xa0\x65\x7c\x0b\xc2\x28\x05\x8d\x62\x1a\x3d\x58\xd3\x7a\x84\x56\xb3\x3d\x25\x9e\x6b\xed\x0e\x8f\xc0\x99\x3e\x1a\x0d\x0e\x99\xe5\x15\xd4\x52\x29\xf2\x0c\xeb\xdc\x32\x8e\xd0\x98\x3d\x92\xfb\x6d\x9d\x43\x69\x98\x07\x81\x4e\x96\x1a\x2c\x71\x5b\x5a\x96\x83\xad\x8e\xbe\xaa\x3b\xfe\x06\x2f\x1b\x2b\x77\x14\x94\xe4\xed\x77\x58\x0c\x8e\xf3\x8a\xe9\x12\x4f\x6d\xe3\x2f\x2e\xd4\x77\xb8\x7a\x3d\x7e\x2c\x94\x5b\x3c\xae\xa2\x2c\x8a\xe3\x64\x16\x09\x2e\xb2\x3c\x5e\x8a\x84\xf3\x34\x2d\x22\xe4\x69\x3c\x15\xb3\x3c\xca\xf2\x85\x58\x4c\xd3\x2c\xc1\x04\xe3\x38\x4e\x12\x1e\x2d\x97\xf3\x25\x4b\x38\x8f\xa2\x28\x5f\x2e\xd9\x3c\x99\x33\x9e\xe7\xf3\x34\xc1\x59\xc6\x59\x1c\x67\x22\x8f\x8a\x64\xc6\xe6\x53\x5e\xe4\x0c\x97\x45\xca\xa6\x2c\x5d\x14\x59\x3a\xc5\x34\x9a\xc6\xf3\xe5\x5c\xa4\xb3\x69\xbe\x10\xd9\x32\x4e\x93\x98\xf1\x24\x8b\x86\xa8\x63\xb5\x69\xb5\x07\x53\x80\x97\x35\x92\x9b\x14\x83\x5d\xb8\x15\x86\xfa\x54\xce\xb4\x68\x6d\x98\x08\x57\xc9\xac\xa2\x83\xbf\x49\x2d\xeb\xb6\x86\x02\x11\x1a\xb4\xb0\x95\xca\xe4\x47\xdf\xd1\x63\x51\xb1\x23\x15\xcb\xb3\x34\xed\xfa\x4a\x48\x6c\x68\x2c\x16\x68\x51\x73\xca\x84\x5a\xea\x02\xb1\x41\x3b\x40\x50\x14\x77\x71\x3c\x28\x71\x9e\x6d\x4f\x76\x7e\x5b\x41\x27\xf6\x27\x75\x06\xe1\x4e\x55\x9f\x34\xa7\xae\xd8\x25\xbd\x16\xc0\x8d\xd4\x94\xaf\x60\x71\xcf\xac\xa0\x8d\xf1\x0b\x73\x9b\x36\x3e\x24\xce\xe8\x12\x18\x95\x23\x8f\x96\xa9\x21\x31\x06\xcc\x21\x37\x42\x86\xe5\xc7\x61\x60\xa7\xd8\x18\xd4\x84\x36\x66\xb1\x8c\x9b\x5d\x7b\xb0\xce\xf9\xc3\x3d\x3f\xe2\xbc\x79\x60\xed\x72\x9f\x2c\xaa\x59\x52\xb6\xdb\xfb\xcf\x75\xb3\xcb\xee\xf1\x01\xb3\x4c\x33\xa1\xef\x8b\xd9\xe1\x90\xcd\x58\x6b\xdd\xe7\x32\xbd\x17\x69\x94\xed\xd4\x61\xcb\xad\x60\x8b\x87\xe3\x43\xdd\x56\xfb\xe3\xc3\xa1\x9d\xdf\xa7\x9f\xe7\x6e\x96\x55\x9e\xa7\xd1\x7d\x94\xce\x8b\x76\xce\xc5\xae\xd2\xf7\xcb\x10\x07\x16\x99\x6b\xa9\x73\x9c\xb3\xe7\x0d\xec\x2b\xe9\x91\xba\x2c\x4d\x67\xbd\xd0\x69\x6d\x95\x8b\x3c\x99\x2e\xf2\x22\xe3\x73\x81\x69\x9e\x46\x39\x8b\x31\x11\xbc\xc0\x69\x3a\x2b\x78\x32\x2b\xe6\xd9\x14\xe7\x69\x26\xe2\x34\x4b\x8a\x6c\x1e\xb3\xa5\x88\x8a\x38\x66\xb3\x39\x5f\x64\xe2\x45\x50\x8c\xe2\x6c\x9a\x61\x2a\xa2\x98\x71\x36\x8f\x17\x6c\x51\x64\xf3\x69\x3e\x5b\x72\x91\x4c\x45\x14\xcd\xe6\xcb\x24\x4f\xd3\x2c\xa6\x84\x99\x67\x2c\x65\x4b\x96\xa6\x82\xa7\xd3\x68\x11\x4d\xf9\xe8\xab\x27\x51\xd7\x4c\xe4\x03\x82\x33\x85\x07\x25\x6b\x49\xde\x9c\x96\x69\x35\x2c\xae\xe2\x68\x96\xcd\x17\xe9\xd7\x00\x35\x3b\x74\x61\x48\x18\xc5\xd9\x1c\x5d\xa3\x73\xac\x0c\x6d\xb9\x66\x87\xe1\x4b\x3e\xe0\x2a\x9b\x66\x59\x1a\x65\x61\xfc\x68\x90\xcb\xe2\x18\xea\x42\xf9\x76\xf3\xaa\x0b\x90\x82\x6a\x52\x98\xb4\x68\x02\x7e\x9c\xaf\x28\xa2\x0a\x38\x9a\x16\xf6\x4c\xfb\xa1\xe6\x9c\xce\xae\x37\x57\x14\x31\xa5\x6d\x78\x77\xe0\xf9\x7c\x35\xa7\x09\xaa\x8f\xe7\x96\x1e\x09\x7e\x78\xcc\x79\xb3\xed\x27\xb8\x73\x3c\xd2\x71\x26\x88\xc0\x95\x44\xed\xdd\xa0\x87\xf6\xc2\xc9\xd5\x3f\xc2\xbf\x7f\x12\xf8\xbf\xa4\x42\x1a\xfa\x68\x70\x0f\x79\x58\x21\x70\xb4\x5e\x16\x1d\x06\x4d\x2b\xf4\x58\x68\x38\xad\x9e\x86\x0d\xdb\xf0\x31\x2d\xfc\x19\x88\x2d\x1e\x3b\x04\xaa\x99\xe7\x00\xb4\x11\x6e\xe8\x31\x09\x5d\x65\x5a\x25\x4e\xe9\x45\xf9\x7b\xc6\xfa\x4b\x2f\x0a\x59\xf4\x6f\xaa\x30\xfb\xb6\xde\xfc\x9d\x9e\x4b\x96\xd1\xf3\xe2\xf6\xf6\xfa\xdc\x92\xf1\x8b\x8f\xb5\x21\xe9\xbb\xf7\xd9\x60\x3c\xed\x3c\x02\x0d\xcf\x28\x25\xb7\xa8\xc2\x5b\x97\xa2\x9d\x76\x18\x8d\xfd\x61\xe4\x21\xf4\xc1\x40\xd9\xac\xe2\x64\x11\xee\xf2\xd9\xc4\x13\xe6\x28\xdb\xf0\x30\x5a\xc8\x50\xc5\xfa\x17\x4f\xa8\xd4\xdd\xe2\xf3\x41\xa9\xaf\x42\x2f\x1e\x1c\x9a\xf1\xf7\x8f\xf6\xa3\x0c\x45\x4b\x2f\x7a\xde\xf4\x9e\xbe\xef\xa8\xf7\xf7\x08\xb2\x18\x66\x24\xe2\xa4\x5f\x0d\xde\x3e\xd3\x8e\xf6\x64\xc3\xff\x03\x00\x00\xff\xff\xa6\xa6\xe3\x55\x05\x11\x00\x00")

func sampleIlxdConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleIlxdConf,
		"sample-ilxd.conf",
	)
}

func sampleIlxdConf() (*asset, error) {
	bytes, err := sampleIlxdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-ilxd.conf", size: 4357, mode: os.FileMode(436), modTime: time.Unix(1693279947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-ilxd.conf": sampleIlxdConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-ilxd.conf": &bintree{sampleIlxdConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

