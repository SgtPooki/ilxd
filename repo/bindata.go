// Code generated by go-bindata.
// sources:
// sample-ilxd.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleIlxdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x5f\x73\xe3\xb6\x11\x7f\xd7\xa7\xd8\x87\x64\xda\xce\xb8\x12\x49\x89\x14\x15\x57\x9d\x51\xee\xd2\x8c\x53\x27\xd6\x9c\x7d\xc9\xf5\x5e\x32\x20\xb0\x24\x71\x02\x01\x1a\x00\xf5\xc7\x9d\xde\x67\xef\x2c\x48\xca\xba\x3b\x5f\x26\xe3\x07\x8b\x8b\xc5\x2e\xf6\xb7\xbb\x3f\x2c\xae\xe1\xa1\x46\x10\xd2\x22\xf7\xc6\x9e\xc0\x1b\x70\xde\x58\x04\xc1\x3c\x03\xd7\xf1\x1a\x98\x03\x5f\x23\x98\xe2\x18\x84\x05\x73\x38\x9d\x0c\xfb\xb0\x64\x9d\xf2\x20\x1d\x7c\x9c\x4d\x49\xc3\x68\xd8\xde\xdd\xdf\xbc\x83\xbb\x7b\x74\x57\xf0\xcd\xed\xdd\xab\xcd\xed\x66\xbb\x7d\xbd\x79\xd8\xcc\x06\x85\xdf\xa4\x16\xe6\xe0\xae\x26\xd7\xf0\x71\x76\x2b\x0b\xcb\xec\x69\xb6\x69\x5b\x25\x39\xf3\xd2\x68\xb8\xef\xda\xd6\x58\x3f\xea\xff\xcc\x38\xdc\xdd\x5f\x01\xd3\x02\xbe\xa9\x4d\x83\xc3\xc2\xe4\x1a\xb6\x8a\xe9\xd5\x14\xe0\x07\xbd\x97\xd6\xe8\x06\xb5\x87\x3d\xb3\x92\x15\x0a\x1d\x30\x8b\x80\xc7\x96\x69\x81\x02\x9c\xa1\x30\x4e\xd0\xb0\x13\x14\x08\x9d\x43\x31\x05\xf8\xe5\xee\xe1\x87\xef\xc6\x13\x4d\xae\x01\xbf\x6a\xc8\x9f\x5a\xc9\x99\x52\x27\xf8\xf6\xd7\xcd\x9b\x9b\xcd\xf7\xb7\x3f\x7c\x7b\x05\x45\xe7\x07\xb3\x9d\xf3\x64\x97\x71\x8e\xce\xa1\x80\x83\xf4\xf5\xe4\x1a\xbe\x19\x95\xa1\x46\x8b\x53\x80\x8d\x72\xe6\x0a\x3e\x12\x66\xe7\xb3\x79\xf3\x29\x52\x17\x28\x11\xd4\x04\xbb\x90\x76\xfd\x71\x36\x95\xea\x28\x26\x93\x6b\x78\xeb\x10\x3c\x3a\xaf\xd1\x93\xc6\xf0\x73\x1d\x8f\x6b\x16\x2b\x92\xd1\xda\xf0\xb3\x5f\xbb\x29\xc1\xd7\xd2\x81\x69\x03\xd2\xd2\x05\x20\xc8\x5f\x29\xad\xf3\xe0\x3c\xb3\xbe\x6b\xe1\x50\xa3\x86\xce\x49\x5d\x8d\xfb\xa1\x31\x02\x29\x56\x0d\xda\x08\x9c\x5c\xc3\x41\x2a\x45\xdb\x43\x79\x8c\x5a\x15\x6a\x74\xd2\xc1\x9e\x29\x29\x98\x37\x16\x34\xfa\x83\xb1\x3b\xd8\xe1\x29\xa4\xf0\xc0\x94\x42\x4f\x9f\x21\xb8\x3b\x5f\xa3\x3d\x48\x87\x20\xfd\xb3\x49\xcb\xb4\x30\xcd\x59\x69\xb0\xbe\x67\x6a\x08\x51\xcb\x3d\x5a\xc7\x14\x6c\x55\x57\x05\xb3\x5b\xc5\x4e\xf0\xd7\xb7\x5b\xbd\xfd\x1b\xb0\xce\x9b\x86\xf9\x21\x5f\xa6\x45\xdd\xd7\xb0\x92\xce\xa3\x06\x2a\x2e\x30\x85\x67\x52\x53\xce\x69\x05\x8f\x1e\xad\x66\x0a\x6e\xb6\xc0\x84\xb0\xe8\x1c\x94\xd6\x34\xe0\xfa\x5a\x44\x01\x02\xf7\x92\xa3\x9b\xc2\xc3\x05\x80\x42\xba\xbe\x44\x64\xc0\x5a\x9b\xae\xd5\x6d\x7f\xc6\x7b\x44\x31\xda\x1a\x6a\x28\x60\xed\x0d\x7c\x30\x52\x07\xb7\x03\x36\x53\xb8\xd3\x3d\xf4\xbd\x94\x90\x0e\x50\x34\x6c\x47\x48\x9b\xce\x57\x86\x72\xc1\x8d\xd6\xc8\xc9\xb3\x23\x3b\xa4\x5c\x18\xe3\x9d\xb7\xac\x85\x16\xd1\xba\x80\xc5\x90\x94\x86\x74\x84\x74\xdc\xec\xd1\x82\x21\xa0\x27\xd7\x83\xda\x67\x07\x98\x5c\x83\x43\x14\x74\xdc\xf5\x4c\xb6\x8b\xd9\x71\x1a\xfe\x66\x9e\xb7\xb3\x55\x14\xc5\xb3\x36\x69\x67\x71\xf2\x7a\xfe\x6f\x63\x7e\xdb\xbe\x9f\x1f\xbf\xff\xe5\xcd\x8f\xc7\x45\x59\xbf\x29\xca\xff\x6c\xf8\xbb\xb7\x35\x7f\x5f\x3f\xbc\x4f\x6e\x5f\xed\x7e\x5a\x2e\x76\x3f\xbd\xfb\xb1\x7c\x5a\x3d\xfc\x7a\xfb\x40\x50\xdc\xf6\xb8\x7f\x0a\x06\xb9\xbf\x90\x68\x01\xad\x35\xde\x70\xa3\xdc\x19\xa8\x21\x61\xa5\xb1\x20\x35\x37\x8d\xd4\x15\xa1\x3c\x54\xd4\x05\x1a\x14\x40\xaf\xfc\x1c\x42\x34\x0d\x7f\xe7\x10\xbe\x50\xc9\x66\xdf\x7d\xf7\xf5\xd5\x67\x03\x9d\x18\x30\x78\xec\x24\x7f\xd9\xca\xa7\x2a\x21\xfb\x1e\x18\xf0\xce\x79\xd3\x50\x38\x16\x58\x45\xa4\xe2\xbc\xed\x83\x20\x59\x10\xad\x5f\x05\xa5\xdf\xdf\x3a\xb4\xbf\x6f\x48\x42\xfb\x5f\x63\xd1\x55\xa0\x4c\x55\x51\xde\x15\xee\x51\x51\x8c\xbf\x52\x5b\xf5\x9f\x3d\x8a\xff\x15\xa4\x78\x05\x52\x97\xe6\x0a\xb4\xf1\x92\xe3\x15\x1c\x98\xd5\x52\x57\x57\x80\xd6\x1a\x7b\x05\xdc\xca\xd0\x0d\xff\xa3\xd3\x9b\x2a\xec\x5f\xd3\x96\xc9\xe4\xab\x37\x80\x32\x15\x94\x52\xa1\xeb\xf7\x5c\x10\xd0\x4c\x99\xca\xfd\xc1\x4e\xca\xec\xd0\xe5\xa2\x20\xa2\x08\xbf\x2f\x0d\xf4\x12\x32\xf1\x9b\x95\x9e\x1a\xb3\x68\x93\x96\xdc\x9c\xeb\xda\xa3\x6d\xa4\x66\x8a\xf8\x8f\x42\xec\x9b\xea\x75\xdf\x6f\xbd\x86\x65\xda\x31\xde\x13\x99\x16\x78\x0c\x0d\xe8\x8f\xe1\xf7\xa0\x8e\x0a\xfd\xa0\x7d\x3c\x2b\x09\x6b\xda\x4f\xd4\x28\x8e\x86\x1d\xa1\x60\xd4\x15\x16\x5d\x6d\x94\x98\xc2\xdd\x1e\xed\xa1\x96\xbc\x0e\x1d\xe9\xfa\x96\x2c\x90\xd4\x34\x0a\x4a\x47\xc3\x8e\x05\xd3\x8e\x1b\x8b\xeb\x38\x8a\xc8\xd6\x06\x1a\x8d\x8d\xd1\x92\x87\x8e\xa2\x70\xa8\x1d\xa9\x84\x03\xf3\x92\xa9\x4f\x39\x64\xbc\x3a\x5e\x64\x62\xf2\xf2\xbd\xf1\xf5\x65\xb7\xbe\x44\xa5\xe7\xc3\x09\xb4\x72\x8f\xa2\x67\xaf\xe0\x91\x8e\x31\x3d\xa7\x81\xbe\xd6\x0d\xe3\xb5\xd4\x08\xe6\xa0\x89\x19\xf6\x4c\xc1\xde\x9c\x58\x85\x74\x4b\x19\x68\xad\x14\xd8\xc3\x05\x96\xf1\x1d\x08\xa3\x14\xb4\x8a\x69\xf4\x60\x4d\xe7\x11\x3a\xcd\x0e\x54\x7f\xae\xb3\x7b\x3c\x01\x67\xfa\x64\x34\x38\x64\x96\xd7\xd0\x48\xa5\x28\x32\x6c\x0a\xcb\x38\x42\x6b\x0e\x48\xe1\x77\x4d\x01\x95\x61\x1e\x04\x3a\x59\x69\xb0\x84\x6d\x65\x59\x01\xb6\x3e\xf9\xba\xe9\xf1\x1b\xa3\x6c\xad\xdc\x33\x8f\x21\xda\x3f\x40\x31\x04\xce\x6b\xa6\x2b\x3c\xb3\xe7\x5f\x5c\xa0\x39\xb8\x79\x3d\x7d\xe6\x8b\x1d\x9e\xd6\x51\x1e\xc5\x71\xb2\x88\x04\x17\x79\x11\xaf\x44\xc2\x79\x96\x95\x11\xf2\x2c\x9e\x8b\x45\x11\xe5\xc5\x52\x2c\xe7\x59\x9e\x60\x82\x71\x1c\x27\x09\x8f\x56\xab\x74\xc5\x12\xce\xa3\x28\x2a\x56\x2b\x96\x26\x29\xe3\x45\x91\x66\x09\x2e\x72\xce\xe2\x38\x17\x45\x54\x26\x0b\x96\xce\x79\x59\x30\x5c\x95\x19\x9b\xb3\x6c\x59\xe6\xd9\x1c\xb3\x68\x1e\xa7\xab\x54\x64\x8b\x79\xb1\x14\xf9\x2a\xce\x92\x98\xf1\x24\x8f\xc6\xaa\x63\x8d\xe9\xb4\x07\x53\x82\x97\x0d\x52\x98\x54\x83\x7d\xb9\x95\x86\xe8\xba\x60\x5a\x74\x36\x0c\x46\xeb\x64\x51\xd3\xc6\x9f\xa5\x96\x4d\xd7\x40\x89\x08\x2d\x5a\xd8\x49\x65\x8a\x93\xef\xe1\xb1\xa8\xd8\x89\x38\xe3\xa2\x3d\x7a\x7a\x2d\x94\xe1\x84\x2a\x96\x68\x51\x73\xba\x58\x1a\xa9\x4b\xc4\x16\xed\x68\x82\xaa\xb8\xaf\xe3\xd1\x89\xf3\x6c\x77\x3e\xe7\xd7\x1d\xf4\x6a\x7f\xd2\x67\x50\xee\x5d\x0d\x4d\x73\xbe\x1c\x02\x8b\xa0\x16\xc0\x8d\xd4\x34\x6b\x82\xc5\x03\xb3\x82\x16\xa6\x2f\x8c\x2f\xda\xf8\xd0\x38\x93\x6b\x60\x44\x03\x1e\x2d\x53\x63\x63\x8c\x36\xc7\xde\x08\x1d\x56\x9c\xc6\xb9\x95\x6a\x63\x74\x13\xd8\xdc\x62\x15\xb7\xfb\xee\x68\x9d\xf3\xc7\x47\x7e\xc2\xb4\x7d\x62\xdd\xea\x90\x2c\xeb\x45\x52\x75\xbb\xc7\x0f\x4d\xbb\xcf\x1f\xf1\x09\xf3\x5c\x33\xa1\x1f\xcb\xc5\xf1\x98\x2f\x58\x67\xdd\x87\x2a\x7b\x14\x59\x94\xef\xd5\x71\xc7\xad\x60\xcb\xa7\xd3\x53\xd3\xd5\x87\xd3\xd3\xb1\x4b\x1f\xb3\x0f\xa9\x5b\xe4\xb5\xe7\x59\xf4\x18\x65\x69\xd9\xa5\x5c\xec\x6b\xfd\xb8\x0a\x75\x60\x91\xb9\x8e\x08\xf4\x12\x3d\x6f\xe0\x50\x4b\x8f\x74\xd9\xd0\x90\x32\x28\x9d\x65\xeb\x42\x14\xc9\x7c\x59\x94\x39\x4f\x05\x66\x45\x16\x15\x2c\xc6\x44\xf0\x12\xe7\xd9\xa2\xe4\xc9\xa2\x4c\xf3\x39\xa6\x59\x2e\xe2\x2c\x4f\xca\x3c\x8d\xd9\x4a\x44\x65\x1c\xb3\x45\xca\x97\xb9\x78\xd1\x28\x46\x71\x3e\xcf\x31\x13\x51\xcc\x38\x4b\xe3\x25\x5b\x96\x79\x3a\x2f\x16\x2b\x2e\x92\xb9\x88\xa2\x45\xba\x4a\x8a\x2c\xcb\x63\x6a\x98\x34\x67\x19\x5b\xb1\x2c\x13\x3c\x9b\x47\xcb\x68\xce\x27\x9f\xbd\x0c\x42\xfe\x9d\x7c\x42\x70\xa6\xf4\xa0\x64\x23\x29\x9a\xb3\x98\xa4\x41\xb8\x8e\xa3\x45\x9e\x2e\xb3\xcf\x0d\x34\xec\xd8\x97\x21\xd9\x28\x2f\xc6\xc9\x06\x9d\x63\x55\xb8\x9d\x1a\x76\x1c\xbf\xe4\x13\xae\xf3\x79\x9e\x67\x51\x1e\x6e\xe1\x16\xb9\x2c\x4f\x81\x17\xaa\x37\xdb\x57\x7d\x81\x94\xc4\x49\x61\xe0\xa0\x41\xf0\x79\xcc\xa0\x8a\x2a\xe1\x64\x3a\x38\x30\xed\x47\xce\x39\xef\xdd\x6c\x6f\xa8\x62\x2a\xdb\xf2\x7e\xc3\x97\x63\x46\x4a\x83\xc4\x50\xcf\x1d\xcd\xca\x7e\x7c\xd3\x78\xb3\x1b\x06\x99\x4b\x7b\xe4\xe3\x42\x11\x81\x2b\x89\xda\xbb\xd1\x0f\xad\x85\x9d\xeb\x7f\x84\x7f\xff\x24\xe3\xff\x92\x0a\x69\xf6\xa1\xf9\x35\xf4\x61\x8d\xc0\xd1\x7a\x59\xf6\x36\xe8\xd2\xa6\x99\xb9\xe5\x24\x3d\xdf\xb9\xb6\xe5\x53\x12\xfc\x19\x13\x3b\x3c\xf5\x16\x88\x33\x2f\x0d\xd0\x42\xc8\xd0\x73\x13\xba\xda\x74\x4a\x9c\xdb\x8b\xfa\xf7\x02\xf5\x97\x06\x6b\x59\x0e\x4f\x8b\x30\x02\x76\xde\xfc\x9d\x5e\x0d\x96\xd1\x94\x7d\x7f\x7f\x7b\x79\x92\xe9\x8b\x6f\x96\xb1\xe9\xfb\x67\xca\x78\x78\x5a\x79\x36\x34\xbe\x26\x94\xdc\xa1\x0a\x4f\x3e\xaa\x76\x5a\x61\x34\xfd\x86\xf7\x09\x59\x1f\x0f\x28\xdb\x75\x9c\x2c\x43\x2e\xbf\x98\x34\xc2\x40\x6e\x5b\xba\xd1\x2d\x3d\x02\x68\x86\xe8\x97\x03\x53\xf7\xc2\x2f\x07\x94\x81\x85\x5e\xdc\x38\x5e\xc6\xe3\xd6\xff\x07\x00\x00\xff\xff\x82\xbe\x1a\x04\x89\x0f\x00\x00")

func sampleIlxdConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleIlxdConf,
		"sample-ilxd.conf",
	)
}

func sampleIlxdConf() (*asset, error) {
	bytes, err := sampleIlxdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-ilxd.conf", size: 3977, mode: os.FileMode(436), modTime: time.Unix(1687042771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-ilxd.conf": sampleIlxdConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-ilxd.conf": &bintree{sampleIlxdConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
