// Code generated by go-bindata.
// sources:
// sample-ilxd.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleIlxdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x4f\x6f\xe3\x36\x13\xc6\xef\xfa\x14\x73\xd8\x05\xde\x17\x70\xad\x24\x9b\x76\x91\xa8\x2e\xe0\x4d\xd2\x45\xb6\xee\x5a\x88\x9d\x6c\x9a\x1b\x4d\x8e\xa4\xa9\x69\x8e\x4a\x52\xfe\xd3\xa2\xf9\xec\xc5\x48\x72\xe2\x74\x37\x40\xa1\x43\x12\xce\xf0\x99\xe1\xef\x21\x27\x19\xcc\x2b\x04\x43\x1e\x75\x64\xbf\x83\xc8\x10\x22\x7b\x04\xa3\xa2\x82\xd0\xe8\x0a\x54\x80\x58\x21\xf0\x62\xdb\x2e\x2e\x54\xc0\x61\xd2\xef\xc3\x42\x35\x36\x02\x05\x78\x4c\x87\x92\xc1\x0e\xf2\xe9\xec\xfa\x1e\xa6\x33\x0c\x03\x78\x33\x99\x5e\x8c\x27\xe3\x3c\xbf\x1c\xcf\xc7\x69\x9f\xf0\x85\x9c\xe1\x4d\x18\x24\x19\x3c\xa6\x13\x5a\x78\xe5\x77\xe9\xb8\xae\x2d\x69\x15\x89\x1d\xcc\x9a\xba\x66\x1f\xf7\xf9\xbf\x2a\x0d\xd3\xd9\x00\x94\x33\xf0\xa6\xe2\x15\xf6\x81\x24\x83\xdc\x2a\x77\x36\x04\xb8\x72\x6b\xf2\xec\x56\xe8\x22\xac\x95\x27\xb5\xb0\x18\x40\x79\x04\xdc\xd6\xca\x19\x34\x10\x58\x8e\xb1\x83\x95\xda\xc1\x02\xa1\x09\x68\x86\x00\x9f\xa7\xf3\xab\xf3\x7d\x47\x49\x06\xf8\xaa\x50\xdc\xd5\xa4\x95\xb5\x3b\x78\x7b\x37\xbe\xb9\x1e\x7f\x98\x5c\xbd\x1d\xc0\xa2\x89\xbd\x6c\x13\xa2\xe8\x2a\xad\x31\x04\x34\xb0\xa1\x58\x25\x19\xbc\xd9\x27\x43\x85\x1e\x87\x00\x63\x1b\x78\x00\x8f\xc2\xec\xa9\xb7\xc8\x2f\x49\x1d\x50\x12\xd4\x82\xdd\x90\x1f\x3d\xa6\x43\xb2\x5b\x93\x24\x19\xdc\x06\x84\x88\x21\x3a\x8c\x92\xd1\xff\x3a\x3a\x6e\x63\x8e\xd6\xe8\x83\xb2\x90\xdb\xa6\x6c\xb1\xe5\x56\xed\xe0\x7f\xb7\xb9\xcb\xff\x0f\xaa\x89\xbc\x52\xb1\x3f\x0c\xd7\xe8\x3a\x83\x2d\x85\x88\x0e\x84\x3c\xf0\x22\x2a\x72\x02\x44\x22\xb8\x8d\xe8\x9d\xb2\x70\x9d\x83\x32\xc6\x63\x08\x50\x78\x5e\x41\xe8\x8c\x42\x03\x06\xd7\xa4\x31\x0c\x61\x5e\x51\x00\xae\x5b\x1f\x0d\x85\x8e\x1f\xb5\x4d\x3a\x6e\x6a\x57\x77\x3d\xce\x10\xcd\x5e\xab\x07\x2c\x8e\x08\x89\xdf\x99\x5c\x5b\xd6\x61\xdc\xb0\x5f\x0e\x61\xea\x20\x44\xe5\x63\xb7\xca\x06\x61\x43\xd6\xc2\x4a\x2d\x31\xc9\x80\x9b\x58\x32\xb9\x12\x34\x3b\x87\x5a\x2a\x07\xd1\x91\xe4\x05\x73\x0c\xd1\xab\x1a\x6a\x44\x1f\x5a\x16\x8d\xa0\xab\x70\x25\x39\x86\x82\xe6\x35\x7a\xe0\x58\xa1\x4f\xb2\x3e\xed\x5f\x0d\x24\x19\x04\x44\x23\xed\x8e\x52\xaa\x4f\xd3\xed\xb0\xfd\xd2\xa8\xeb\xf4\xec\xe8\xe8\x38\xad\x4f\xea\xf4\xf8\xe4\xf2\xdd\x2f\xcc\x5f\xf2\x87\x77\xdb\x0f\x9f\x6f\x3e\x6e\x4f\x8b\xea\x66\x51\xfc\x36\xd6\xf7\xb7\x95\x7e\xa8\xe6\x0f\x27\x93\x8b\xe5\xa7\xf7\xa7\xcb\x4f\xf7\x1f\x8b\x3f\xcf\xe6\x77\x93\xb9\xa0\x98\x74\xdc\x5f\xc2\x90\xf2\x07\x2b\xce\x40\xed\x39\xb2\x66\x1b\x9e\x40\xf5\x86\x15\xec\x81\x9c\xe6\x15\xb9\x52\x28\x77\x4d\x1f\xd2\x90\x03\x74\xc9\xcf\x47\x38\x1a\xb6\xdf\xd3\x11\xbe\x4a\xf9\x21\x3d\x3f\x7f\x3d\xfa\x2c\xd0\x98\x9e\xc1\x1f\x0d\xe9\x6f\xab\xbc\x4c\x49\x32\xb8\xc4\x45\x53\x82\xe5\xb2\x14\xdf\x2c\xae\xd1\x4a\x8f\x77\xca\x92\xe9\xfe\xec\x28\xfc\x65\x24\x71\x00\xe4\x0a\x1e\x80\xe3\x48\x1a\x07\xb0\x51\xde\x91\x2b\x07\x80\xde\xb3\x1f\x80\xf6\xd4\xde\xe6\xbf\xa5\x3a\x97\xed\xfe\x91\x6c\x49\x92\x57\xc7\x9b\xe5\x12\x0a\xb2\x18\xba\x3d\x07\xaf\x2b\xb5\x5c\x86\xf6\x8a\xd6\xa8\xa9\xd8\xb5\x56\x94\x37\xf9\x05\x90\x8b\xe8\x0b\xa5\xb1\xf3\x43\xde\xc9\xb3\x0b\xec\x80\x0a\xd8\x71\x03\x1b\xe5\xda\x40\x7f\xcf\xba\xbd\xe3\xfc\x5a\x4e\x58\xfa\x5a\x77\x1b\xbe\x76\xe1\x7b\xe1\x9c\x64\x30\x76\xf2\x44\x2b\x74\x71\x3f\x0f\x23\x2f\x7b\x9f\x0f\xf5\xa4\xc6\x41\x22\x82\xb6\x84\x2e\x86\x7d\x1d\x89\xb5\x3b\x47\x3f\xb6\x3f\x7e\x12\xf1\x9f\xc9\xa2\x5c\x0d\x79\xde\xc2\x5e\x04\x35\xfa\x48\x45\xa7\x21\x4c\x92\x0c\x7c\xad\x65\xf5\x89\x89\xaf\xf5\x50\x16\xfe\x8b\xc4\x12\x77\x9d\xc2\x12\x77\x2f\x04\x24\xd0\x3a\xf2\x3c\x21\x42\xc5\x8d\x35\xfb\x79\xdc\xda\x73\x40\xfd\x5b\x73\x87\x0a\x68\xc2\xbe\xac\x8c\xb2\xef\x4a\x74\xe8\x95\x0c\xa1\xd9\x6c\x72\xd8\x89\x80\xb8\x2e\x20\x1e\xd4\xa3\x20\xb7\xa8\x2b\xb6\xa9\xd0\x3d\x35\x2f\x91\x67\x21\x8a\xdd\x84\xb1\xb4\x44\xdb\xfe\xbb\x88\x1e\xdb\x88\x92\xe1\xb0\x96\x7b\x2a\xea\xfb\x06\xa9\x0e\xa3\xe3\x93\xf7\xad\x99\xc7\xff\x04\x00\x00\xff\xff\xfb\x0c\x9a\xc3\x53\x07\x00\x00")

func sampleIlxdConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleIlxdConf,
		"sample-ilxd.conf",
	)
}

func sampleIlxdConf() (*asset, error) {
	bytes, err := sampleIlxdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-ilxd.conf", size: 1875, mode: os.FileMode(436), modTime: time.Unix(1685899293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-ilxd.conf": sampleIlxdConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-ilxd.conf": &bintree{sampleIlxdConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

