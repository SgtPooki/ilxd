// Copyright (c) 2022 Project Illium
// Use of this source code is governed by an MIT
// license that can be found in the LICENSE file.

package params

import (
	"github.com/project-illium/ilxd/types/blocks"
	"github.com/project-illium/ilxd/types/transactions"
	"math"
	"time"
)

// MainnetGenesisBlock is the genesis block for the mainnet.
//
// Technically this is not a valid block and would not pass the normal validation
// rules. The reason for this is because the genesis block needs to do two things
// â€• create new coins and stake them. Without at least one validator created in the
// genesis block the chain cannot move forward. Normally however, a stake transaction
// cannot stake a coinbase created in the same block since the stake's zk-snark proof
// must make use of the block's txoRoot which isn't known until after the block is
// connected.
var MainnetGenesisBlock = &blocks.Block{
	Header: &blocks.BlockHeader{
		Producer_ID: []byte{0x00}, //TODO
		Height:      0,
		Timestamp:   time.Unix(0, 0).Unix(), //TODO
		Parent:      make([]byte, 32),
		Version:     1,
		TxRoot:      []byte{0x00}, //TODO
		Signature:   []byte{0x00}, //TODO
	},
	Transactions: []*transactions.Transaction{
		{
			Tx: &transactions.Transaction_CoinbaseTransaction{
				CoinbaseTransaction: &transactions.CoinbaseTransaction{
					Validator_ID: []byte{0x00}, //TODO
					NewCoins:     1 << 60 / 5,
					Outputs: []*transactions.Output{
						{
							Commitment:      []byte{0x00}, //TODO
							EphemeralPubkey: []byte{0x00}, //TODO
							Ciphertext:      []byte{0x00}, //TODO
						},
					},
					Signature: []byte{0x00}, //TODO
					Proof:     []byte{0x00}, //TODO
				},
			},
		},
		{
			Tx: &transactions.Transaction_StakeTransaction{
				StakeTransaction: &transactions.StakeTransaction{
					Validator_ID: []byte{0x00}, //TODO
					Amount:       0,
					Nullifier:    []byte{0xff},
					Signature:    nil,
					Proof:        nil,
				},
			},
		},
	},
}

var RegtestGenesisKey = []byte{
	0x08, 0x01, 0x12, 0x40, 0x1e, 0x08, 0x38, 0x3f,
	0x62, 0x95, 0x22, 0x14, 0x9a, 0x75, 0x05, 0xc7,
	0x66, 0x8f, 0x07, 0x0b, 0xea, 0x30, 0x07, 0xaf,
	0x8e, 0xd2, 0xb3, 0x97, 0x0e, 0x7a, 0x2f, 0x24,
	0x56, 0x58, 0x40, 0x39, 0xde, 0x64, 0x44, 0x6f,
	0xf3, 0x73, 0x0d, 0xdb, 0xf2, 0x21, 0x9f, 0xe1,
	0xb9, 0x96, 0x31, 0x66, 0x50, 0xb7, 0x47, 0xea,
	0x90, 0xd7, 0x42, 0xc8, 0xe2, 0x2f, 0x97, 0xbd,
	0x3c, 0x0b, 0x61, 0x6f,
}

var RegtestGenesisBlock = &blocks.Block{
	Header: &blocks.BlockHeader{
		Height:  0,
		Parent:  make([]byte, 32),
		Version: 1,
		TxRoot: []byte{0xb2, 0xa2, 0xd6, 0x50, 0x0c, 0x7c, 0xf4, 0x0d,
			0x44, 0x85, 0x6e, 0x14, 0x3c, 0xf6, 0x59, 0x90,
			0x0a, 0x4a, 0x63, 0x28, 0xde, 0x34, 0xac, 0x6d,
			0x59, 0x41, 0xca, 0x26, 0x70, 0xa6, 0x17, 0x9f},
	},
	Transactions: []*transactions.Transaction{
		{
			Tx: &transactions.Transaction_CoinbaseTransaction{
				CoinbaseTransaction: &transactions.CoinbaseTransaction{
					Validator_ID: []byte{0x00, 0x24, 0x08, 0x01, 0x12, 0x20, 0xde, 0x64,
						0x44, 0x6f, 0xf3, 0x73, 0x0d, 0xdb, 0xf2, 0x21,
						0x9f, 0xe1, 0xb9, 0x96, 0x31, 0x66, 0x50, 0xb7,
						0x47, 0xea, 0x90, 0xd7, 0x42, 0xc8, 0xe2, 0x2f,
						0x97, 0xbd, 0x3c, 0x0b, 0x61, 0x6f}, //TODO
					NewCoins: math.MaxUint64 / 10,
					Outputs: []*transactions.Output{
						{
							Commitment:      make([]byte, 32),  //TODO
							EphemeralPubkey: make([]byte, 36),  //TODO
							Ciphertext:      make([]byte, 176), //TODO
						},
					},
					Signature: []byte{0x91, 0x06, 0x11, 0x74, 0x6b, 0x63, 0x67, 0xee,
						0x8d, 0xb8, 0x97, 0xe5, 0xe2, 0xc6, 0x47, 0xe2,
						0xf2, 0x6e, 0xdd, 0x37, 0xb0, 0x1f, 0xd5, 0xaf,
						0x2e, 0x4c, 0xe3, 0x94, 0xc7, 0x15, 0xeb, 0x29,
						0xb5, 0x8c, 0x9a, 0x3c, 0x7e, 0x44, 0xbc, 0xbb,
						0xb9, 0xed, 0xa4, 0xf7, 0x16, 0x15, 0x67, 0x02,
						0x9a, 0x81, 0x56, 0x9c, 0x3e, 0xfd, 0xe4, 0xdc,
						0x9f, 0x50, 0x9b, 0x89, 0xa7, 0xbc, 0x83, 0x03}, //TODO
					Proof: []byte{0x00}, //TODO
				},
			},
		},
		{
			Tx: &transactions.Transaction_StakeTransaction{
				StakeTransaction: &transactions.StakeTransaction{
					Validator_ID: []byte{0x00, 0x24, 0x08, 0x01, 0x12, 0x20, 0xde, 0x64,
						0x44, 0x6f, 0xf3, 0x73, 0x0d, 0xdb, 0xf2, 0x21,
						0x9f, 0xe1, 0xb9, 0x96, 0x31, 0x66, 0x50, 0xb7,
						0x47, 0xea, 0x90, 0xd7, 0x42, 0xc8, 0xe2, 0x2f,
						0x97, 0xbd, 0x3c, 0x0b, 0x61, 0x6f}, //TODO
					Amount:    math.MaxUint64 / 10,
					Nullifier: []byte{0xff},
					TxoRoot: []byte{0xc6, 0xb4, 0x85, 0xda, 0x73, 0xb1, 0xc9, 0x31,
						0xd1, 0x9e, 0x61, 0x78, 0x80, 0x89, 0x49, 0xff,
						0xef, 0x3e, 0x08, 0x3f, 0x6e, 0x80, 0xfa, 0xdc,
						0x56, 0x16, 0x04, 0x0c, 0x1a, 0xd8, 0x90, 0xb2},
					Signature: []byte{0xa4, 0xa5, 0xac, 0xcc, 0x2c, 0x07, 0x16, 0x9b,
						0x7b, 0x50, 0xaf, 0x83, 0xdd, 0xc0, 0xaa, 0x02,
						0x04, 0x28, 0xf2, 0xbf, 0xb7, 0xe0, 0x00, 0x79,
						0x8f, 0x06, 0xc5, 0x22, 0xbe, 0x67, 0xc7, 0x1d,
						0x91, 0xd5, 0xf5, 0x1a, 0x34, 0xee, 0xe0, 0xeb,
						0x81, 0x61, 0xad, 0xff, 0xae, 0x2d, 0x47, 0x1a,
						0xc6, 0xba, 0xcc, 0x57, 0xa0, 0xaf, 0x0a, 0x11,
						0x07, 0x29, 0xf9, 0x39, 0xd3, 0x3c, 0xff, 0x05},
					Proof: nil,
				},
			},
		},
	},
}
