;; This is a multisig script. It allows users to define a set of public keys where
;; the unlocking of the script requires signatures from some pre-defined threshold
;; of those keys. Each key must be a `Nova` public key and the signatures must
;; cover the transaction's sighash.
;;
;; locking-params must take the format:
;; <threshold> <pubkey1-x> <pubkey1-y> <pubkey2-x> <pubkey-2y> ....
;;
;; unlocking-params must take the format:
;; <key-selector> <sig1> <sig2>
;;
;; Where key-selector is a list of zeros and ones equal in length to the number of
;; public keys. For example: (1 0 1). A one means the signature should be validated
;; against the public key at that index.
;;
;; Where each sig is a list of (sig-rx sig-ry, sig-s).
(lambda (locking-params unlocking-params input-index private-params public-params)
        !(import std/crypto/checksig)
        !(import std/collections/nth)

        !(def threshold (car locking-params))
        !(def key-selector (car unlocking-params))
        !(def pubkeys (cdr locking-params))
        !(def sigs (cdr unlocking-params))
        !(def sighash !(param sighash))

        !(defun validate-sigs (selector key-idx sig-idx valid-sigs) (
                (if (car selector)
                    (if (= (car selector) 1)
                        (if (checksig (nth sig-idx sigs) (cons (nth key-idx pubkeys) (cons (nth (+ key-idx 1) pubkeys) nil)) sighash)
                            (validate-sigs (cdr selector) (+ key-idx 2) (+ sig-idx 1) (+ valid-sigs 1))
                            nil
                        )
                        (validate-sigs (cdr selector) (+ key-idx 2) sig-idx valid-sigs)
                    )
                    (>= valid-sigs threshold)
                )
        ))

        (validate-sigs key-selector 0 0 0)
)