(lambda (priv stake-pub) (
        letrec (
               ;; cat-and-hash takes two integers, each up to max field element.
               ;; The integers are converted to their byte representation,
               ;; concatenated together, then hashed with blake2s. The two
               ;; most significant bits of the output are dropped.
               (cat-and-hash (lambda (a b)
                    (eval (cons 'coproc_blake2s (cons a (cons b nil))))))

               ;; map-get returns an item from a map given the key.
               ;; the map must be a list of form (:key item :key item).
               (map-get (lambda (key plist)
                    (if plist
                       (if (eq key (car plist))
                           (car (cdr plist))
                           (map-get key (cdr (cdr plist))))
                       nil)))

               ;; map-update updates value of the given key in the
               ;; provided map and returns the new map.
               ;; If the key is not in the map a new map entry will
               ;; be added.
               ;; The map is formatted as a flat list of format
               ;; (:key item :key item)
               (map-update (lambda (key value map)
                    (if (eq map nil)
                        (cons key (cons value nil))
                        (let ((existing-key (car map))
                              (rest-map (cdr map)))
                              (if (= existing-key key)
                                  (cons key (cons value (cdr (cdr map))))
                                  (cons existing-key (map-update key value rest-map)))))))

               ;; check-overflow returns whether the sum of a and b overflows a u64
               (check-overflow (lambda (a b)
                   (if (> b 0)
                       (if (> a (- 18446744073709551615 b))
                           t
                           nil)
                       nil)))

               ;; validate-inclusion-proof validates that the provided
               ;; output commitment connects to the provided merkle root
               ;; via a merkle inclusion proof.
               (validate-inclusion-proof (lambda (leaf hashes root)
                   (letrec (
                       (hash-branches (lambda (h hashes)
                           (let ((next-hash (car hashes))
                                (val (car next-hash))
                                (new-h (if (cdr next-hash)
                                      (cat-and-hash h val)
                                      (cat-and-hash val h))))

                              (if (cdr hashes)
                                  (hash-branches new-h (cdr hashes))
                                  new-h)))))

                       (= (hash-branches leaf hashes) root))))

               )

               ;; Validate the staked input
               (let  (
                      (pub (car (cdr stake-pub)))
                      (locked-until (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr pub))))))))))
                      (locking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr priv)))))))))
                      (unlocking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr priv))))))))))
                      (locking-func (car (cdr (cdr (cdr (cdr (cdr (cdr priv))))))))
                      (script-commitment (num (commit locking-func)))
                      (script-hash (num (commit (cons script-commitment locking-params))))
                      (amount (car priv))
                      (asset-id (car (cdr priv)))
                      (salt (car (cdr (cdr priv))))
                      (state (car (cdr (cdr (cdr priv)))))
                      (output-commitment (num (commit (cons script-hash (cons amount (cons asset-id (cons salt (cons state nil))))))))
                      (commitment-index (car (cdr (cdr (cdr (cdr priv))))))
                      (leaf (cat-and-hash commitment-index output-commitment))
                      (hashes (car (cdr (cdr (cdr (cdr (cdr priv)))))))
                      (nullifier (num (commit (cons commitment-index (cons salt (cons script-commitment (cons locking-params nil)))))))
                     )

                     ;; Make sure the public amount matches the private amount
                     (if (= amount (car stake-pub))
                        ;; Make sure the calculated nullifier matches the public nullifier
                        (if (= nullifier (car (car (cdr pub))))
                            ;; Validate the inclusion proof proving the input commitment exists in the txo-set.
                            (if (validate-inclusion-proof leaf hashes (car (cdr (cdr pub))))
                                ;; Validate the user's locking script
                                (if (locking-func locking-params unlocking-params 0 priv pub)
                                    ;; If locked-until is greater than zero the script must be the
                                    ;; timelocked-multisig script.
                                    (if (> locked-until 0)
                                        (if (= script-commitment 0x0ed0bb733afa3e3c2d035ec681418cc8e0af0136ddf9f2e41aca4fc9c3476e9a)
                                            ;; Validate that the script's lock-until matches the transaction's
                                            (= (car locking-params) locked-until)
                                            nil
                                        )
                                        t ;; Locked-until is zero. No further validation is needed.
                                    )
                                    nil ;; Locking script validation failed. Return false.
                                )
                                nil ;; Invalid inclusion proof. Return false.
                            )
                            nil ;; Nullifier invalid. Return false.
                         )
                         nil ;; The public amount does not match the private amount
                     )
               )
        )
)