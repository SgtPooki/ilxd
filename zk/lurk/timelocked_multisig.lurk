;; The timelocked multisig script is the same as the normal multisig script except
;; the coins can only be spent after the timelock expires.
;;
;; script-params must take the format:
;; <lock-until> <threshold> <pubkey1-x> <pubkey1-y> <pubkey2-x> <pubkey-2y> ....
;;
;; unlocking-params must take the format:
;; <key-selector> <sig1> <sig2>
;;
;; Where key-selector is a list of zeros and ones equal in length to the number of
;; public keys. For example: (1 0 1). A zero means the signature should be validated
;; against the public key at that index.
;;
;; Where each sig is a cons cell of (sig-r sig-s).
;;
;; The timelock precision is hardcoded to 600 seconds (10 minutes) this means a transaction
;; will only be valid for 10 minutes after it is signed. Feel free to adjust this value
;; for your use case.
(lambda (script-params unlocking-params input-index private-params public-params)
        !(import std/crypto)

        !(def lock-until (car script-params))
        !(def threshold (car (cdr script-params)))
        !(def key-selector (car unlocking-params))
        !(def pubkeys (cdr (cdr script-params)))
        !(def sigs (cdr unlocking-params))

        !(defun validate-sigs (selector key-idx sig-idx valid-sigs) (
                (if (= (car selector) 1)
                    (if (check-sig (nth sig-idx sigs) (cons (nth key-idx pubkeys) (nth (+ key-idx 1) pubkeys)) !(param sighash))
                        (validate-sigs (cdr selector) (+ key-idx 2) (+ sig-idx 1) (+ valid-sigs 1))
                        nil
                    )
                    (if (cdr selector)
                        (validate-sigs (cdr selector) (+ key-idx 2) sig-idx valid-sigs)
                        (>= valid-sigs threshold)
                    )
                )
        ))

        !(assert (<= !(param locktime-precision) 600))
        !(assert (>= !(param locktime) lock-until))
        (validate-sigs key-selector 0 0 0)
)