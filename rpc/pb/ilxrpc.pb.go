// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: ilxrpc.proto

package pb

import (
	blocks "github.com/project-illium/ilxd/types/blocks"
	transactions "github.com/project-illium/ilxd/types/transactions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Illium network types
type GetBlockchainInfoResponse_Network int32

const (
	// Live public network with monetary value
	GetBlockchainInfoResponse_MAINNET GetBlockchainInfoResponse_Network = 0
	// An isolated environment for automated testing
	GetBlockchainInfoResponse_REGTEST GetBlockchainInfoResponse_Network = 1
	// A public environment where monetary value is agreed to be zero,
	// and some checks for transaction conformity are disabled.
	GetBlockchainInfoResponse_TESTNET GetBlockchainInfoResponse_Network = 2
)

// Enum value maps for GetBlockchainInfoResponse_Network.
var (
	GetBlockchainInfoResponse_Network_name = map[int32]string{
		0: "MAINNET",
		1: "REGTEST",
		2: "TESTNET",
	}
	GetBlockchainInfoResponse_Network_value = map[string]int32{
		"MAINNET": 0,
		"REGTEST": 1,
		"TESTNET": 2,
	}
)

func (x GetBlockchainInfoResponse_Network) Enum() *GetBlockchainInfoResponse_Network {
	p := new(GetBlockchainInfoResponse_Network)
	*p = x
	return p
}

func (x GetBlockchainInfoResponse_Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBlockchainInfoResponse_Network) Descriptor() protoreflect.EnumDescriptor {
	return file_ilxrpc_proto_enumTypes[0].Descriptor()
}

func (GetBlockchainInfoResponse_Network) Type() protoreflect.EnumType {
	return &file_ilxrpc_proto_enumTypes[0]
}

func (x GetBlockchainInfoResponse_Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBlockchainInfoResponse_Network.Descriptor instead.
func (GetBlockchainInfoResponse_Network) EnumDescriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{5, 0}
}

type SetLogLevelRequest_Level int32

const (
	SetLogLevelRequest_DEBUG     SetLogLevelRequest_Level = 0
	SetLogLevelRequest_INFO      SetLogLevelRequest_Level = 1
	SetLogLevelRequest_WARNING   SetLogLevelRequest_Level = 2
	SetLogLevelRequest_ERROR     SetLogLevelRequest_Level = 3
	SetLogLevelRequest_CRITICAL  SetLogLevelRequest_Level = 4
	SetLogLevelRequest_ALERT     SetLogLevelRequest_Level = 5
	SetLogLevelRequest_EMERGENCY SetLogLevelRequest_Level = 6
)

// Enum value maps for SetLogLevelRequest_Level.
var (
	SetLogLevelRequest_Level_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
		4: "CRITICAL",
		5: "ALERT",
		6: "EMERGENCY",
	}
	SetLogLevelRequest_Level_value = map[string]int32{
		"DEBUG":     0,
		"INFO":      1,
		"WARNING":   2,
		"ERROR":     3,
		"CRITICAL":  4,
		"ALERT":     5,
		"EMERGENCY": 6,
	}
)

func (x SetLogLevelRequest_Level) Enum() *SetLogLevelRequest_Level {
	p := new(SetLogLevelRequest_Level)
	*p = x
	return p
}

func (x SetLogLevelRequest_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetLogLevelRequest_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_ilxrpc_proto_enumTypes[1].Descriptor()
}

func (SetLogLevelRequest_Level) Type() protoreflect.EnumType {
	return &file_ilxrpc_proto_enumTypes[1]
}

func (x SetLogLevelRequest_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetLogLevelRequest_Level.Descriptor instead.
func (SetLogLevelRequest_Level) EnumDescriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{96, 0}
}

// State of the transaction acceptance.
type TransactionNotification_Type int32

const (
	// A transaction in mempool.
	TransactionNotification_UNCONFIRMED TransactionNotification_Type = 0
	// A transaction in a finalized block.
	TransactionNotification_FINALIZED TransactionNotification_Type = 1
)

// Enum value maps for TransactionNotification_Type.
var (
	TransactionNotification_Type_name = map[int32]string{
		0: "UNCONFIRMED",
		1: "FINALIZED",
	}
	TransactionNotification_Type_value = map[string]int32{
		"UNCONFIRMED": 0,
		"FINALIZED":   1,
	}
)

func (x TransactionNotification_Type) Enum() *TransactionNotification_Type {
	p := new(TransactionNotification_Type)
	*p = x
	return p
}

func (x TransactionNotification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionNotification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ilxrpc_proto_enumTypes[2].Descriptor()
}

func (TransactionNotification_Type) Type() protoreflect.EnumType {
	return &file_ilxrpc_proto_enumTypes[2]
}

func (x TransactionNotification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionNotification_Type.Descriptor instead.
func (TransactionNotification_Type) EnumDescriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{118, 0}
}

// BlockchainService
type GetMempoolInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMempoolInfoRequest) Reset() {
	*x = GetMempoolInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolInfoRequest) ProtoMessage() {}

func (x *GetMempoolInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMempoolInfoRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{0}
}

type GetMempoolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The count of transactions in the mempool
	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The size in bytes of all transactions in the mempool
	Bytes uint32 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *GetMempoolInfoResponse) Reset() {
	*x = GetMempoolInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolInfoResponse) ProtoMessage() {}

func (x *GetMempoolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMempoolInfoResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetMempoolInfoResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetMempoolInfoResponse) GetBytes() uint32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type GetMempoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When `full_transactions` is true, full transaction data is provided
	// instead of just transaction hashes. Default is false.
	FullTransactions bool `protobuf:"varint,1,opt,name=full_transactions,json=fullTransactions,proto3" json:"full_transactions,omitempty"`
}

func (x *GetMempoolRequest) Reset() {
	*x = GetMempoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolRequest) ProtoMessage() {}

func (x *GetMempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolRequest.ProtoReflect.Descriptor instead.
func (*GetMempoolRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetMempoolRequest) GetFullTransactions() bool {
	if x != nil {
		return x.FullTransactions
	}
	return false
}

type GetMempoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of unconfirmed transactions.
	TransactionData []*TransactionData `protobuf:"bytes,1,rep,name=transaction_data,json=transactionData,proto3" json:"transaction_data,omitempty"`
}

func (x *GetMempoolResponse) Reset() {
	*x = GetMempoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolResponse) ProtoMessage() {}

func (x *GetMempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolResponse.ProtoReflect.Descriptor instead.
func (*GetMempoolResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetMempoolResponse) GetTransactionData() []*TransactionData {
	if x != nil {
		return x.TransactionData
	}
	return nil
}

type GetBlockchainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockchainInfoRequest) Reset() {
	*x = GetBlockchainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoRequest) ProtoMessage() {}

func (x *GetBlockchainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{4}
}

type GetBlockchainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which network the node is operating on
	Network GetBlockchainInfoResponse_Network `protobuf:"varint,1,opt,name=network,proto3,enum=pb.GetBlockchainInfoResponse_Network" json:"network,omitempty"`
	// The current number of blocks in the chain
	BestHeight uint32 `protobuf:"varint,2,opt,name=best_height,json=bestHeight,proto3" json:"best_height,omitempty"`
	// The hash of the best (tip) block in the chain
	BestBlock_ID []byte `protobuf:"bytes,3,opt,name=best_block_ID,json=bestBlockID,proto3" json:"best_block_ID,omitempty"`
	// The timestamp of the best block
	BlockTime int64 `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// When `tx_index` is true, the node has full transaction index enabled
	TxIndex bool `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// The total number of coins in circulation
	CiculatingSupply uint64 `protobuf:"varint,6,opt,name=ciculating_supply,json=ciculatingSupply,proto3" json:"ciculating_supply,omitempty"`
	// The total number of coins staked
	TotalStaked uint64 `protobuf:"varint,7,opt,name=total_staked,json=totalStaked,proto3" json:"total_staked,omitempty"`
}

func (x *GetBlockchainInfoResponse) Reset() {
	*x = GetBlockchainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoResponse) ProtoMessage() {}

func (x *GetBlockchainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockchainInfoResponse) GetNetwork() GetBlockchainInfoResponse_Network {
	if x != nil {
		return x.Network
	}
	return GetBlockchainInfoResponse_MAINNET
}

func (x *GetBlockchainInfoResponse) GetBestHeight() uint32 {
	if x != nil {
		return x.BestHeight
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetBestBlock_ID() []byte {
	if x != nil {
		return x.BestBlock_ID
	}
	return nil
}

func (x *GetBlockchainInfoResponse) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetTxIndex() bool {
	if x != nil {
		return x.TxIndex
	}
	return false
}

func (x *GetBlockchainInfoResponse) GetCiculatingSupply() uint64 {
	if x != nil {
		return x.CiculatingSupply
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetTotalStaked() uint64 {
	if x != nil {
		return x.TotalStaked
	}
	return 0
}

type GetBlockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOrHeight:
	//	*GetBlockInfoRequest_Block_ID
	//	*GetBlockInfoRequest_Height
	IdOrHeight isGetBlockInfoRequest_IdOrHeight `protobuf_oneof:"id_or_height"`
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{6}
}

func (m *GetBlockInfoRequest) GetIdOrHeight() isGetBlockInfoRequest_IdOrHeight {
	if m != nil {
		return m.IdOrHeight
	}
	return nil
}

func (x *GetBlockInfoRequest) GetBlock_ID() []byte {
	if x, ok := x.GetIdOrHeight().(*GetBlockInfoRequest_Block_ID); ok {
		return x.Block_ID
	}
	return nil
}

func (x *GetBlockInfoRequest) GetHeight() uint32 {
	if x, ok := x.GetIdOrHeight().(*GetBlockInfoRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetBlockInfoRequest_IdOrHeight interface {
	isGetBlockInfoRequest_IdOrHeight()
}

type GetBlockInfoRequest_Block_ID struct {
	// The block hash as a byte array
	Block_ID []byte `protobuf:"bytes,1,opt,name=block_ID,json=blockID,proto3,oneof"`
}

type GetBlockInfoRequest_Height struct {
	// The block number
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetBlockInfoRequest_Block_ID) isGetBlockInfoRequest_IdOrHeight() {}

func (*GetBlockInfoRequest_Height) isGetBlockInfoRequest_IdOrHeight() {}

type GetBlockInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Marshaled block header data, as well as metadata
	Info *BlockInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlockInfoResponse) GetInfo() *BlockInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOrHeight:
	//	*GetBlockRequest_Block_ID
	//	*GetBlockRequest_Height
	IdOrHeight isGetBlockRequest_IdOrHeight `protobuf_oneof:"id_or_height"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{8}
}

func (m *GetBlockRequest) GetIdOrHeight() isGetBlockRequest_IdOrHeight {
	if m != nil {
		return m.IdOrHeight
	}
	return nil
}

func (x *GetBlockRequest) GetBlock_ID() []byte {
	if x, ok := x.GetIdOrHeight().(*GetBlockRequest_Block_ID); ok {
		return x.Block_ID
	}
	return nil
}

func (x *GetBlockRequest) GetHeight() uint32 {
	if x, ok := x.GetIdOrHeight().(*GetBlockRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetBlockRequest_IdOrHeight interface {
	isGetBlockRequest_IdOrHeight()
}

type GetBlockRequest_Block_ID struct {
	// The block hash as a byte array
	Block_ID []byte `protobuf:"bytes,1,opt,name=block_ID,json=blockID,proto3,oneof"`
}

type GetBlockRequest_Height struct {
	// The block number
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetBlockRequest_Block_ID) isGetBlockRequest_IdOrHeight() {}

func (*GetBlockRequest_Height) isGetBlockRequest_IdOrHeight() {}

type GetBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full block response
	Block *blocks.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlockResponse) GetBlock() *blocks.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetCompressedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOrHeight:
	//	*GetCompressedBlockRequest_Block_ID
	//	*GetCompressedBlockRequest_Height
	IdOrHeight isGetCompressedBlockRequest_IdOrHeight `protobuf_oneof:"id_or_height"`
}

func (x *GetCompressedBlockRequest) Reset() {
	*x = GetCompressedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompressedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompressedBlockRequest) ProtoMessage() {}

func (x *GetCompressedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompressedBlockRequest.ProtoReflect.Descriptor instead.
func (*GetCompressedBlockRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{10}
}

func (m *GetCompressedBlockRequest) GetIdOrHeight() isGetCompressedBlockRequest_IdOrHeight {
	if m != nil {
		return m.IdOrHeight
	}
	return nil
}

func (x *GetCompressedBlockRequest) GetBlock_ID() []byte {
	if x, ok := x.GetIdOrHeight().(*GetCompressedBlockRequest_Block_ID); ok {
		return x.Block_ID
	}
	return nil
}

func (x *GetCompressedBlockRequest) GetHeight() uint32 {
	if x, ok := x.GetIdOrHeight().(*GetCompressedBlockRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetCompressedBlockRequest_IdOrHeight interface {
	isGetCompressedBlockRequest_IdOrHeight()
}

type GetCompressedBlockRequest_Block_ID struct {
	// The block hash as a byte array
	Block_ID []byte `protobuf:"bytes,1,opt,name=block_ID,json=blockID,proto3,oneof"`
}

type GetCompressedBlockRequest_Height struct {
	// The block number
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetCompressedBlockRequest_Block_ID) isGetCompressedBlockRequest_IdOrHeight() {}

func (*GetCompressedBlockRequest_Height) isGetCompressedBlockRequest_IdOrHeight() {}

type GetCompressedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The compressed block contains only transaction outputs
	Block *blocks.CompressedBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetCompressedBlockResponse) Reset() {
	*x = GetCompressedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompressedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompressedBlockResponse) ProtoMessage() {}

func (x *GetCompressedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompressedBlockResponse.ProtoReflect.Descriptor instead.
func (*GetCompressedBlockResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetCompressedBlockResponse) GetBlock() *blocks.CompressedBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height to start receiving headers
	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// The last header height to return. Note that a maximum of 2000
	// blocks will be returned per request. If end_height is > start_height + 1999
	// then end_height will be set set to start_height + 1999 and 2000 headers
	// will be returned. If end_height is past the tip of the chain the headers
	// will be returned up to the tip.
	//
	// If end_height is less than start_height 2000 headers will be returned.
	EndHeight uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetHeadersRequest) Reset() {
	*x = GetHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadersRequest) ProtoMessage() {}

func (x *GetHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetHeadersRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetHeadersRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetHeadersRequest) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*blocks.BlockHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *GetHeadersResponse) Reset() {
	*x = GetHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadersResponse) ProtoMessage() {}

func (x *GetHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetHeadersResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetHeadersResponse) GetHeaders() []*blocks.BlockHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type GetCompressedBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height to start receiving headers
	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// The last block height to return. Note that a maximum of 2000 blocks will be returned
	// per request. If end_height is > start_height + 1999 then end_height will be set set
	// to start_height + 1999 and 2000 compressed blocks will be returned. If end_height is
	// past the tip of the chain the compressed blocks will be returned up to the tip.
	//
	// If end_height is less than start_height 2000 blocks will be returned.
	EndHeight uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetCompressedBlocksRequest) Reset() {
	*x = GetCompressedBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompressedBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompressedBlocksRequest) ProtoMessage() {}

func (x *GetCompressedBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompressedBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetCompressedBlocksRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetCompressedBlocksRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetCompressedBlocksRequest) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetCompressedBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The compressed block response
	Blocks []*blocks.CompressedBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetCompressedBlocksResponse) Reset() {
	*x = GetCompressedBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompressedBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompressedBlocksResponse) ProtoMessage() {}

func (x *GetCompressedBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompressedBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetCompressedBlocksResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetCompressedBlocksResponse) GetBlocks() []*blocks.CompressedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction hash
	Transaction_ID []byte `protobuf:"bytes,1,opt,name=transaction_ID,json=transactionID,proto3" json:"transaction_ID,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetTransactionRequest) GetTransaction_ID() []byte {
	if x != nil {
		return x.Transaction_ID
	}
	return nil
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction response
	Tx *transactions.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetTransactionResponse) GetTx() *transactions.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type GetMerkleProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction hash
	Transaction_ID []byte `protobuf:"bytes,1,opt,name=transaction_ID,json=transactionID,proto3" json:"transaction_ID,omitempty"`
}

func (x *GetMerkleProofRequest) Reset() {
	*x = GetMerkleProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleProofRequest) ProtoMessage() {}

func (x *GetMerkleProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleProofRequest.ProtoReflect.Descriptor instead.
func (*GetMerkleProofRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetMerkleProofRequest) GetTransaction_ID() []byte {
	if x != nil {
		return x.Transaction_ID
	}
	return nil
}

type GetMerkleProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block header information for the corresponding transaction
	Block *BlockInfo `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// A list containing the transaction hash, the adjacent leaf transaction hash
	// and the hashes of the highest nodes in the merkle tree not built with the transaction.
	// Proof hashes are ordered following transaction order, or left to right on the merkle tree
	Hashes [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	// The least significant bit in flags corresponds to the last hash in `hashes`. The second least
	// significant to the second to last hash, and so on. The bit signifies whether the hash should be
	// prepended (0) or appended (1) when hashing each level in the tree.
	Flags uint32 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *GetMerkleProofResponse) Reset() {
	*x = GetMerkleProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleProofResponse) ProtoMessage() {}

func (x *GetMerkleProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleProofResponse.ProtoReflect.Descriptor instead.
func (*GetMerkleProofResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetMerkleProofResponse) GetBlock() *BlockInfo {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetMerkleProofResponse) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *GetMerkleProofResponse) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type GetValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A serialized validator ID
	Validator_ID []byte `protobuf:"bytes,1,opt,name=validator_ID,json=validatorID,proto3" json:"validator_ID,omitempty"`
}

func (x *GetValidatorRequest) Reset() {
	*x = GetValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRequest) ProtoMessage() {}

func (x *GetValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetValidatorRequest) GetValidator_ID() []byte {
	if x != nil {
		return x.Validator_ID
	}
	return nil
}

type GetValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The validator response
	Validator *Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *GetValidatorResponse) Reset() {
	*x = GetValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorResponse) ProtoMessage() {}

func (x *GetValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetValidatorResponse) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

type GetValidatorSetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetValidatorSetInfoRequest) Reset() {
	*x = GetValidatorSetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSetInfoRequest) ProtoMessage() {}

func (x *GetValidatorSetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorSetInfoRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{22}
}

type GetValidatorSetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of coins staked on the network
	TotalStaked uint64 `protobuf:"varint,1,opt,name=total_staked,json=totalStaked,proto3" json:"total_staked,omitempty"`
	// The total number of validators on the network
	NumValidators uint32 `protobuf:"varint,2,opt,name=num_validators,json=numValidators,proto3" json:"num_validators,omitempty"`
}

func (x *GetValidatorSetInfoResponse) Reset() {
	*x = GetValidatorSetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSetInfoResponse) ProtoMessage() {}

func (x *GetValidatorSetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorSetInfoResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetValidatorSetInfoResponse) GetTotalStaked() uint64 {
	if x != nil {
		return x.TotalStaked
	}
	return 0
}

func (x *GetValidatorSetInfoResponse) GetNumValidators() uint32 {
	if x != nil {
		return x.NumValidators
	}
	return 0
}

type GetValidatorSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetValidatorSetRequest) Reset() {
	*x = GetValidatorSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSetRequest) ProtoMessage() {}

func (x *GetValidatorSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSetRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorSetRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{24}
}

type GetValidatorSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full list of validators on the network
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *GetValidatorSetResponse) Reset() {
	*x = GetValidatorSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSetResponse) ProtoMessage() {}

func (x *GetValidatorSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSetResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorSetResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetValidatorSetResponse) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type GetAccumulatorCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HeightOrTimestamp:
	//	*GetAccumulatorCheckpointRequest_Height
	//	*GetAccumulatorCheckpointRequest_Timestamp
	HeightOrTimestamp isGetAccumulatorCheckpointRequest_HeightOrTimestamp `protobuf_oneof:"height_or_timestamp"`
}

func (x *GetAccumulatorCheckpointRequest) Reset() {
	*x = GetAccumulatorCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccumulatorCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccumulatorCheckpointRequest) ProtoMessage() {}

func (x *GetAccumulatorCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccumulatorCheckpointRequest.ProtoReflect.Descriptor instead.
func (*GetAccumulatorCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{26}
}

func (m *GetAccumulatorCheckpointRequest) GetHeightOrTimestamp() isGetAccumulatorCheckpointRequest_HeightOrTimestamp {
	if m != nil {
		return m.HeightOrTimestamp
	}
	return nil
}

func (x *GetAccumulatorCheckpointRequest) GetHeight() uint32 {
	if x, ok := x.GetHeightOrTimestamp().(*GetAccumulatorCheckpointRequest_Height); ok {
		return x.Height
	}
	return 0
}

func (x *GetAccumulatorCheckpointRequest) GetTimestamp() int64 {
	if x, ok := x.GetHeightOrTimestamp().(*GetAccumulatorCheckpointRequest_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

type isGetAccumulatorCheckpointRequest_HeightOrTimestamp interface {
	isGetAccumulatorCheckpointRequest_HeightOrTimestamp()
}

type GetAccumulatorCheckpointRequest_Height struct {
	// The height of the accumulator checkpoint to return.
	// If there is no checkpoint at that height, the *prior*
	// checkpoint found in the chain will be returned.
	//
	// An error will be returned if there is no checkpoint before
	// the provided height.
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3,oneof"`
}

type GetAccumulatorCheckpointRequest_Timestamp struct {
	// The timestamp of the accumulator checkpoint to return.
	// If there is no checkpoint at that timestamp, the *prior*
	// checkpoint found in the chain will be returned.
	//
	// An error will be returned if there is no checkpoint before
	// the provided timestamp.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3,oneof"`
}

func (*GetAccumulatorCheckpointRequest_Height) isGetAccumulatorCheckpointRequest_HeightOrTimestamp() {
}

func (*GetAccumulatorCheckpointRequest_Timestamp) isGetAccumulatorCheckpointRequest_HeightOrTimestamp() {
}

type GetAccumulatorCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height of the checkpoint
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The number of entries in the accumulator at this checkpoint
	NumEntries uint64 `protobuf:"varint,2,opt,name=num_entries,json=numEntries,proto3" json:"num_entries,omitempty"`
	// The accumulator hashes
	Accumulator [][]byte `protobuf:"bytes,3,rep,name=accumulator,proto3" json:"accumulator,omitempty"`
}

func (x *GetAccumulatorCheckpointResponse) Reset() {
	*x = GetAccumulatorCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccumulatorCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccumulatorCheckpointResponse) ProtoMessage() {}

func (x *GetAccumulatorCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccumulatorCheckpointResponse.ProtoReflect.Descriptor instead.
func (*GetAccumulatorCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{27}
}

func (x *GetAccumulatorCheckpointResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetAccumulatorCheckpointResponse) GetNumEntries() uint64 {
	if x != nil {
		return x.NumEntries
	}
	return 0
}

func (x *GetAccumulatorCheckpointResponse) GetAccumulator() [][]byte {
	if x != nil {
		return x.Accumulator
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction to submit to the network
	Transaction *transactions.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{28}
}

func (x *SubmitTransactionRequest) GetTransaction() *transactions.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID of the transaction.
	//
	// If submission was unsuccessful and error will be returned.
	Transaction_ID []byte `protobuf:"bytes,1,opt,name=transaction_ID,json=transactionID,proto3" json:"transaction_ID,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{29}
}

func (x *SubmitTransactionResponse) GetTransaction_ID() []byte {
	if x != nil {
		return x.Transaction_ID
	}
	return nil
}

type SubscribeBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When full_block is true, a complete marshaled block is sent.
	// Default is false, block metadata is sent. See `BlockInfo`.
	FullBlock bool `protobuf:"varint,1,opt,name=full_block,json=fullBlock,proto3" json:"full_block,omitempty"`
	// When full_transactions is true, provide full transaction info
	// for a marshaled block.
	//
	// Default is false, only the transaction IDs are included for
	// a marshaled block.
	FullTransactions bool `protobuf:"varint,2,opt,name=full_transactions,json=fullTransactions,proto3" json:"full_transactions,omitempty"`
}

func (x *SubscribeBlocksRequest) Reset() {
	*x = SubscribeBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBlocksRequest) ProtoMessage() {}

func (x *SubscribeBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBlocksRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBlocksRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{30}
}

func (x *SubscribeBlocksRequest) GetFullBlock() bool {
	if x != nil {
		return x.FullBlock
	}
	return false
}

func (x *SubscribeBlocksRequest) GetFullTransactions() bool {
	if x != nil {
		return x.FullTransactions
	}
	return false
}

// WalletServerService
type RegisterViewKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A view key to register with the server.
	ViewKey string `protobuf:"bytes,1,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	// The date the address was created. The server will scan historical blocks
	// for matching transactions from the birthday forward. Please don't use an
	// earlier birthday than needed as it puts more stress on the server.
	Birthday int64 `protobuf:"varint,2,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *RegisterViewKeyRequest) Reset() {
	*x = RegisterViewKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterViewKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterViewKeyRequest) ProtoMessage() {}

func (x *RegisterViewKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterViewKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterViewKeyRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterViewKeyRequest) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *RegisterViewKeyRequest) GetBirthday() int64 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

type RegisterViewKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterViewKeyResponse) Reset() {
	*x = RegisterViewKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterViewKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterViewKeyResponse) ProtoMessage() {}

func (x *RegisterViewKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterViewKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterViewKeyResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{32}
}

type SubscribeTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of view keys to subscribe to
	ViewKeys []string `protobuf:"bytes,1,rep,name=view_keys,json=viewKeys,proto3" json:"view_keys,omitempty"`
	// When include_mempool is true, new unconfirmed transactions from mempool are
	// included apart from the ones finalized in a block.
	IncludeMempool bool `protobuf:"varint,2,opt,name=include_mempool,json=includeMempool,proto3" json:"include_mempool,omitempty"`
	// When include_in_block is true, transactions are included when they are finalized.
	// This notification is sent in addition to any requested mempool notifications.
	IncludeInBlock bool `protobuf:"varint,3,opt,name=include_in_block,json=includeInBlock,proto3" json:"include_in_block,omitempty"`
}

func (x *SubscribeTransactionsRequest) Reset() {
	*x = SubscribeTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTransactionsRequest) ProtoMessage() {}

func (x *SubscribeTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{33}
}

func (x *SubscribeTransactionsRequest) GetViewKeys() []string {
	if x != nil {
		return x.ViewKeys
	}
	return nil
}

func (x *SubscribeTransactionsRequest) GetIncludeMempool() bool {
	if x != nil {
		return x.IncludeMempool
	}
	return false
}

func (x *SubscribeTransactionsRequest) GetIncludeInBlock() bool {
	if x != nil {
		return x.IncludeInBlock
	}
	return false
}

type GetWalletTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The view key to query transactions
	ViewKey string `protobuf:"bytes,1,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	// The number of transactions to skip, starting with the oldest first.
	// Does not affect results of unconfirmed transactions.
	NbSkip uint32 `protobuf:"varint,2,opt,name=nb_skip,json=nbSkip,proto3" json:"nb_skip,omitempty"`
	// Specify the number of transactions to fetch.
	NbFetch uint32 `protobuf:"varint,3,opt,name=nb_fetch,json=nbFetch,proto3" json:"nb_fetch,omitempty"`
	// Types that are assignable to StartBlock:
	//	*GetWalletTransactionsRequest_Block_ID
	//	*GetWalletTransactionsRequest_Height
	StartBlock isGetWalletTransactionsRequest_StartBlock `protobuf_oneof:"start_block"`
}

func (x *GetWalletTransactionsRequest) Reset() {
	*x = GetWalletTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransactionsRequest) ProtoMessage() {}

func (x *GetWalletTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetWalletTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetWalletTransactionsRequest) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *GetWalletTransactionsRequest) GetNbSkip() uint32 {
	if x != nil {
		return x.NbSkip
	}
	return 0
}

func (x *GetWalletTransactionsRequest) GetNbFetch() uint32 {
	if x != nil {
		return x.NbFetch
	}
	return 0
}

func (m *GetWalletTransactionsRequest) GetStartBlock() isGetWalletTransactionsRequest_StartBlock {
	if m != nil {
		return m.StartBlock
	}
	return nil
}

func (x *GetWalletTransactionsRequest) GetBlock_ID() []byte {
	if x, ok := x.GetStartBlock().(*GetWalletTransactionsRequest_Block_ID); ok {
		return x.Block_ID
	}
	return nil
}

func (x *GetWalletTransactionsRequest) GetHeight() int32 {
	if x, ok := x.GetStartBlock().(*GetWalletTransactionsRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetWalletTransactionsRequest_StartBlock interface {
	isGetWalletTransactionsRequest_StartBlock()
}

type GetWalletTransactionsRequest_Block_ID struct {
	// Recommended. Only get transactions after (or within) a
	// starting block identified by hash.
	Block_ID []byte `protobuf:"bytes,4,opt,name=block_ID,json=blockID,proto3,oneof"`
}

type GetWalletTransactionsRequest_Height struct {
	// Recommended. Only get transactions after (or within) a
	// starting block identified by block number.
	Height int32 `protobuf:"varint,5,opt,name=height,proto3,oneof"`
}

func (*GetWalletTransactionsRequest_Block_ID) isGetWalletTransactionsRequest_StartBlock() {}

func (*GetWalletTransactionsRequest_Height) isGetWalletTransactionsRequest_StartBlock() {}

type GetWalletTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of transactions as the response
	Transactions []*transactions.Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetWalletTransactionsResponse) Reset() {
	*x = GetWalletTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransactionsResponse) ProtoMessage() {}

func (x *GetWalletTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetWalletTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{35}
}

func (x *GetWalletTransactionsResponse) GetTransactions() []*transactions.Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetTxoProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output commitment to fetch the txo proof for
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *GetTxoProofRequest) Reset() {
	*x = GetTxoProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxoProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxoProofRequest) ProtoMessage() {}

func (x *GetTxoProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxoProofRequest.ProtoReflect.Descriptor instead.
func (*GetTxoProofRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{36}
}

func (x *GetTxoProofRequest) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type GetTxoProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proof response
	Proof *TxoProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *GetTxoProofResponse) Reset() {
	*x = GetTxoProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxoProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxoProofResponse) ProtoMessage() {}

func (x *GetTxoProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxoProofResponse.ProtoReflect.Descriptor instead.
func (*GetTxoProofResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{37}
}

func (x *GetTxoProofResponse) GetProof() *TxoProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// WalletService
type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{38}
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Balance response
	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetBalanceResponse) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type GetWalletSeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWalletSeedRequest) Reset() {
	*x = GetWalletSeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSeedRequest) ProtoMessage() {}

func (x *GetWalletSeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSeedRequest.ProtoReflect.Descriptor instead.
func (*GetWalletSeedRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{40}
}

type GetWalletSeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wallet's mnemonic seed
	MnemonicSeed string `protobuf:"bytes,1,opt,name=mnemonic_seed,json=mnemonicSeed,proto3" json:"mnemonic_seed,omitempty"`
}

func (x *GetWalletSeedResponse) Reset() {
	*x = GetWalletSeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSeedResponse) ProtoMessage() {}

func (x *GetWalletSeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSeedResponse.ProtoReflect.Descriptor instead.
func (*GetWalletSeedResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetWalletSeedResponse) GetMnemonicSeed() string {
	if x != nil {
		return x.MnemonicSeed
	}
	return ""
}

type GetAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAddressesRequest) Reset() {
	*x = GetAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesRequest) ProtoMessage() {}

func (x *GetAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetAddressesRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{42}
}

type GetAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent address generated by the wallet
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetAddressesResponse) Reset() {
	*x = GetAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesResponse) ProtoMessage() {}

func (x *GetAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesResponse.ProtoReflect.Descriptor instead.
func (*GetAddressesResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{43}
}

func (x *GetAddressesResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetNewAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNewAddressRequest) Reset() {
	*x = GetNewAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressRequest) ProtoMessage() {}

func (x *GetNewAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressRequest.ProtoReflect.Descriptor instead.
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{44}
}

type GetNewAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A fresh address generated by the wallet
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetNewAddressResponse) Reset() {
	*x = GetNewAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressResponse) ProtoMessage() {}

func (x *GetNewAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressResponse.ProtoReflect.Descriptor instead.
func (*GetNewAddressResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{45}
}

func (x *GetNewAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTransactionsRequest) Reset() {
	*x = GetTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsRequest) ProtoMessage() {}

func (x *GetTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{46}
}

type GetTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All transactions in the wallet
	Txs []*WalletTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *GetTransactionsResponse) Reset() {
	*x = GetTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsResponse) ProtoMessage() {}

func (x *GetTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{47}
}

func (x *GetTransactionsResponse) GetTxs() []*WalletTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type GetUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUtxosRequest) Reset() {
	*x = GetUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxosRequest) ProtoMessage() {}

func (x *GetUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxosRequest.ProtoReflect.Descriptor instead.
func (*GetUtxosRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{48}
}

type GetUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full list of utxos in the wallet
	Utxos []*Utxo `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *GetUtxosResponse) Reset() {
	*x = GetUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxosResponse) ProtoMessage() {}

func (x *GetUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxosResponse.ProtoReflect.Descriptor instead.
func (*GetUtxosResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{49}
}

func (x *GetUtxosResponse) GetUtxos() []*Utxo {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type GetPrivateKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to fetch private keys for
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetPrivateKeysRequest) Reset() {
	*x = GetPrivateKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateKeysRequest) ProtoMessage() {}

func (x *GetPrivateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateKeysRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateKeysRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{50}
}

func (x *GetPrivateKeysRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetPrivateKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The spend private key
	SpendKey []byte `protobuf:"bytes,1,opt,name=spend_key,json=spendKey,proto3" json:"spend_key,omitempty"`
	// The view private key
	ViewKey []byte `protobuf:"bytes,2,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
}

func (x *GetPrivateKeysResponse) Reset() {
	*x = GetPrivateKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateKeysResponse) ProtoMessage() {}

func (x *GetPrivateKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateKeysResponse.ProtoReflect.Descriptor instead.
func (*GetPrivateKeysResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{51}
}

func (x *GetPrivateKeysResponse) GetSpendKey() []byte {
	if x != nil {
		return x.SpendKey
	}
	return nil
}

func (x *GetPrivateKeysResponse) GetViewKey() []byte {
	if x != nil {
		return x.ViewKey
	}
	return nil
}

type ImportAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to import
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The address contains a scriptHash. We also
	// need what's behind the hash in order to
	// import an address and detect spends.
	//
	// This is the serialized unlocking script
	// <scriptCommitment><scriptParams>
	UnlockingScript []byte `protobuf:"bytes,2,opt,name=unlockingScript,proto3" json:"unlockingScript,omitempty"`
	// The view private key needed to decrypt and
	// detect transactions.
	ViewPrivateKey []byte `protobuf:"bytes,3,opt,name=viewPrivateKey,proto3" json:"viewPrivateKey,omitempty"`
	// Should the wallet rescan the blockchain looking for
	// transactions for this address.
	Rescan bool `protobuf:"varint,4,opt,name=rescan,proto3" json:"rescan,omitempty"`
	// If so what height should it start the rescan.
	RescanFromHeight uint32 `protobuf:"varint,5,opt,name=rescanFromHeight,proto3" json:"rescanFromHeight,omitempty"`
}

func (x *ImportAddressRequest) Reset() {
	*x = ImportAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressRequest) ProtoMessage() {}

func (x *ImportAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressRequest.ProtoReflect.Descriptor instead.
func (*ImportAddressRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{52}
}

func (x *ImportAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ImportAddressRequest) GetUnlockingScript() []byte {
	if x != nil {
		return x.UnlockingScript
	}
	return nil
}

func (x *ImportAddressRequest) GetViewPrivateKey() []byte {
	if x != nil {
		return x.ViewPrivateKey
	}
	return nil
}

func (x *ImportAddressRequest) GetRescan() bool {
	if x != nil {
		return x.Rescan
	}
	return false
}

func (x *ImportAddressRequest) GetRescanFromHeight() uint32 {
	if x != nil {
		return x.RescanFromHeight
	}
	return 0
}

type ImportAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportAddressResponse) Reset() {
	*x = ImportAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressResponse) ProtoMessage() {}

func (x *ImportAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressResponse.ProtoReflect.Descriptor instead.
func (*ImportAddressResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{53}
}

type CreateMultisigSpendKeypairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateMultisigSpendKeypairRequest) Reset() {
	*x = CreateMultisigSpendKeypairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigSpendKeypairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigSpendKeypairRequest) ProtoMessage() {}

func (x *CreateMultisigSpendKeypairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigSpendKeypairRequest.ProtoReflect.Descriptor instead.
func (*CreateMultisigSpendKeypairRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{54}
}

type CreateMultisigSpendKeypairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A private key response
	Privkey []byte `protobuf:"bytes,1,opt,name=privkey,proto3" json:"privkey,omitempty"`
	// The corresponding public key
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *CreateMultisigSpendKeypairResponse) Reset() {
	*x = CreateMultisigSpendKeypairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigSpendKeypairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigSpendKeypairResponse) ProtoMessage() {}

func (x *CreateMultisigSpendKeypairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigSpendKeypairResponse.ProtoReflect.Descriptor instead.
func (*CreateMultisigSpendKeypairResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{55}
}

func (x *CreateMultisigSpendKeypairResponse) GetPrivkey() []byte {
	if x != nil {
		return x.Privkey
	}
	return nil
}

func (x *CreateMultisigSpendKeypairResponse) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type CreateMultisigViewKeypairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateMultisigViewKeypairRequest) Reset() {
	*x = CreateMultisigViewKeypairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigViewKeypairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigViewKeypairRequest) ProtoMessage() {}

func (x *CreateMultisigViewKeypairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigViewKeypairRequest.ProtoReflect.Descriptor instead.
func (*CreateMultisigViewKeypairRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{56}
}

type CreateMultisigViewKeypairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A private key response
	Privkey []byte `protobuf:"bytes,1,opt,name=privkey,proto3" json:"privkey,omitempty"`
	// The corresponding public key
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *CreateMultisigViewKeypairResponse) Reset() {
	*x = CreateMultisigViewKeypairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigViewKeypairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigViewKeypairResponse) ProtoMessage() {}

func (x *CreateMultisigViewKeypairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigViewKeypairResponse.ProtoReflect.Descriptor instead.
func (*CreateMultisigViewKeypairResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{57}
}

func (x *CreateMultisigViewKeypairResponse) GetPrivkey() []byte {
	if x != nil {
		return x.Privkey
	}
	return nil
}

func (x *CreateMultisigViewKeypairResponse) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type CreateMultisigAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of public keys to use for the multisig address
	Pubkeys [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// The number of keys required to sign the tranaction to
	// release the funds.
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// A view key to use with the address
	ViewPubkey []byte `protobuf:"bytes,3,opt,name=view_pubkey,json=viewPubkey,proto3" json:"view_pubkey,omitempty"`
}

func (x *CreateMultisigAddressRequest) Reset() {
	*x = CreateMultisigAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigAddressRequest) ProtoMessage() {}

func (x *CreateMultisigAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateMultisigAddressRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{58}
}

func (x *CreateMultisigAddressRequest) GetPubkeys() [][]byte {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *CreateMultisigAddressRequest) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CreateMultisigAddressRequest) GetViewPubkey() []byte {
	if x != nil {
		return x.ViewPubkey
	}
	return nil
}

type CreateMultisigAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multisig address response
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateMultisigAddressResponse) Reset() {
	*x = CreateMultisigAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigAddressResponse) ProtoMessage() {}

func (x *CreateMultisigAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateMultisigAddressResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{59}
}

func (x *CreateMultisigAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateMultiSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxOrSighash:
	//	*CreateMultiSignatureRequest_Tx
	//	*CreateMultiSignatureRequest_Sighash
	TxOrSighash isCreateMultiSignatureRequest_TxOrSighash `protobuf_oneof:"tx_or_sighash"`
	// A private key to sign with
	PrivateKey []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *CreateMultiSignatureRequest) Reset() {
	*x = CreateMultiSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiSignatureRequest) ProtoMessage() {}

func (x *CreateMultiSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiSignatureRequest.ProtoReflect.Descriptor instead.
func (*CreateMultiSignatureRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{60}
}

func (m *CreateMultiSignatureRequest) GetTxOrSighash() isCreateMultiSignatureRequest_TxOrSighash {
	if m != nil {
		return m.TxOrSighash
	}
	return nil
}

func (x *CreateMultiSignatureRequest) GetTx() *transactions.Transaction {
	if x, ok := x.GetTxOrSighash().(*CreateMultiSignatureRequest_Tx); ok {
		return x.Tx
	}
	return nil
}

func (x *CreateMultiSignatureRequest) GetSighash() []byte {
	if x, ok := x.GetTxOrSighash().(*CreateMultiSignatureRequest_Sighash); ok {
		return x.Sighash
	}
	return nil
}

func (x *CreateMultiSignatureRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type isCreateMultiSignatureRequest_TxOrSighash interface {
	isCreateMultiSignatureRequest_TxOrSighash()
}

type CreateMultiSignatureRequest_Tx struct {
	// Either provide the transaction so the sighash can be computed
	Tx *transactions.Transaction `protobuf:"bytes,1,opt,name=tx,proto3,oneof"`
}

type CreateMultiSignatureRequest_Sighash struct {
	// Or just provide the sighash itself
	Sighash []byte `protobuf:"bytes,2,opt,name=sighash,proto3,oneof"`
}

func (*CreateMultiSignatureRequest_Tx) isCreateMultiSignatureRequest_TxOrSighash() {}

func (*CreateMultiSignatureRequest_Sighash) isCreateMultiSignatureRequest_TxOrSighash() {}

type CreateMultiSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A signature covering the sighash
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CreateMultiSignatureResponse) Reset() {
	*x = CreateMultiSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultiSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultiSignatureResponse) ProtoMessage() {}

func (x *CreateMultiSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultiSignatureResponse.ProtoReflect.Descriptor instead.
func (*CreateMultiSignatureResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{61}
}

func (x *CreateMultiSignatureResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ProveMultisigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction to prove. This RPC requires there to be only one
	// input and that the input be a multisig script.
	Tx *RawTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// A list of signatures. Each one must cover the transaction's sighash.
	Sigs [][]byte `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *ProveMultisigRequest) Reset() {
	*x = ProveMultisigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveMultisigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveMultisigRequest) ProtoMessage() {}

func (x *ProveMultisigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveMultisigRequest.ProtoReflect.Descriptor instead.
func (*ProveMultisigRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{62}
}

func (x *ProveMultisigRequest) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ProveMultisigRequest) GetSigs() [][]byte {
	if x != nil {
		return x.Sigs
	}
	return nil
}

type ProveMultisigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A full transaction with the proof attached
	ProvedTx *transactions.Transaction `protobuf:"bytes,1,opt,name=proved_tx,json=provedTx,proto3" json:"proved_tx,omitempty"`
}

func (x *ProveMultisigResponse) Reset() {
	*x = ProveMultisigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveMultisigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveMultisigResponse) ProtoMessage() {}

func (x *ProveMultisigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveMultisigResponse.ProtoReflect.Descriptor instead.
func (*ProveMultisigResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{63}
}

func (x *ProveMultisigResponse) GetProvedTx() *transactions.Transaction {
	if x != nil {
		return x.ProvedTx
	}
	return nil
}

type WalletLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WalletLockRequest) Reset() {
	*x = WalletLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletLockRequest) ProtoMessage() {}

func (x *WalletLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletLockRequest.ProtoReflect.Descriptor instead.
func (*WalletLockRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{64}
}

type WalletLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WalletLockResponse) Reset() {
	*x = WalletLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletLockResponse) ProtoMessage() {}

func (x *WalletLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletLockResponse.ProtoReflect.Descriptor instead.
func (*WalletLockResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{65}
}

type WalletUnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wallet passphrase used to decrypt
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	// The duration (in seconds) to leave the wallet decrypted for.
	// It will automatically be re-encrypted after the duration passes.
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WalletUnlockRequest) Reset() {
	*x = WalletUnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletUnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletUnlockRequest) ProtoMessage() {}

func (x *WalletUnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletUnlockRequest.ProtoReflect.Descriptor instead.
func (*WalletUnlockRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{66}
}

func (x *WalletUnlockRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *WalletUnlockRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type WalletUnlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WalletUnlockResponse) Reset() {
	*x = WalletUnlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletUnlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletUnlockResponse) ProtoMessage() {}

func (x *WalletUnlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletUnlockResponse.ProtoReflect.Descriptor instead.
func (*WalletUnlockResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{67}
}

type SetWalletPassphraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wallet passphrase
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *SetWalletPassphraseRequest) Reset() {
	*x = SetWalletPassphraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWalletPassphraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWalletPassphraseRequest) ProtoMessage() {}

func (x *SetWalletPassphraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWalletPassphraseRequest.ProtoReflect.Descriptor instead.
func (*SetWalletPassphraseRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{68}
}

func (x *SetWalletPassphraseRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type SetWalletPassphraseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetWalletPassphraseResponse) Reset() {
	*x = SetWalletPassphraseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWalletPassphraseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWalletPassphraseResponse) ProtoMessage() {}

func (x *SetWalletPassphraseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWalletPassphraseResponse.ProtoReflect.Descriptor instead.
func (*SetWalletPassphraseResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{69}
}

type ChangeWalletPassphraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current passphrase
	CurrentPassphrase string `protobuf:"bytes,1,opt,name=current_passphrase,json=currentPassphrase,proto3" json:"current_passphrase,omitempty"`
	// Passphrase to change it to
	NewPassphrase string `protobuf:"bytes,2,opt,name=new_passphrase,json=newPassphrase,proto3" json:"new_passphrase,omitempty"`
}

func (x *ChangeWalletPassphraseRequest) Reset() {
	*x = ChangeWalletPassphraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeWalletPassphraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWalletPassphraseRequest) ProtoMessage() {}

func (x *ChangeWalletPassphraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWalletPassphraseRequest.ProtoReflect.Descriptor instead.
func (*ChangeWalletPassphraseRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{70}
}

func (x *ChangeWalletPassphraseRequest) GetCurrentPassphrase() string {
	if x != nil {
		return x.CurrentPassphrase
	}
	return ""
}

func (x *ChangeWalletPassphraseRequest) GetNewPassphrase() string {
	if x != nil {
		return x.NewPassphrase
	}
	return ""
}

type ChangeWalletPassphraseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeWalletPassphraseResponse) Reset() {
	*x = ChangeWalletPassphraseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeWalletPassphraseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWalletPassphraseResponse) ProtoMessage() {}

func (x *ChangeWalletPassphraseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWalletPassphraseResponse.ProtoReflect.Descriptor instead.
func (*ChangeWalletPassphraseResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{71}
}

type DeletePrivateKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePrivateKeysRequest) Reset() {
	*x = DeletePrivateKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateKeysRequest) ProtoMessage() {}

func (x *DeletePrivateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateKeysRequest.ProtoReflect.Descriptor instead.
func (*DeletePrivateKeysRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{72}
}

type DeletePrivateKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePrivateKeysResponse) Reset() {
	*x = DeletePrivateKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateKeysResponse) ProtoMessage() {}

func (x *DeletePrivateKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateKeysResponse.ProtoReflect.Descriptor instead.
func (*DeletePrivateKeysResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{73}
}

type CreateRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of either utxo commitments or private inputs
	Inputs []*CreateRawTransactionRequest_Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of outputs to send coins to
	Outputs []*CreateRawTransactionRequest_Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// A bool to control whether the wallet will automatically append a
	// change output and send the remainder of the coins (minus a fee)
	// to the change output.
	AppendChangeOutput bool `protobuf:"varint,3,opt,name=append_change_output,json=appendChangeOutput,proto3" json:"append_change_output,omitempty"`
	// If append_change_output is true you can specify the fee amount to use.
	// If zero the wallet will use its internal fee policy.
	FeePerKilobyte uint64 `protobuf:"varint,4,opt,name=fee_per_kilobyte,json=feePerKilobyte,proto3" json:"fee_per_kilobyte,omitempty"`
}

func (x *CreateRawTransactionRequest) Reset() {
	*x = CreateRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionRequest) ProtoMessage() {}

func (x *CreateRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{74}
}

func (x *CreateRawTransactionRequest) GetInputs() []*CreateRawTransactionRequest_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreateRawTransactionRequest) GetOutputs() []*CreateRawTransactionRequest_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CreateRawTransactionRequest) GetAppendChangeOutput() bool {
	if x != nil {
		return x.AppendChangeOutput
	}
	return false
}

func (x *CreateRawTransactionRequest) GetFeePerKilobyte() uint64 {
	if x != nil {
		return x.FeePerKilobyte
	}
	return 0
}

type CreateRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw transaction response
	Tx *RawTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *CreateRawTransactionResponse) Reset() {
	*x = CreateRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionResponse) ProtoMessage() {}

func (x *CreateRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{75}
}

func (x *CreateRawTransactionResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ProveRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw transaction to prove
	Tx *RawTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The private keys to use to prove the inputs.
	PrivateKeys [][]byte `protobuf:"bytes,2,rep,name=private_keys,json=privateKeys,proto3" json:"private_keys,omitempty"`
}

func (x *ProveRawTransactionRequest) Reset() {
	*x = ProveRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveRawTransactionRequest) ProtoMessage() {}

func (x *ProveRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*ProveRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{76}
}

func (x *ProveRawTransactionRequest) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ProveRawTransactionRequest) GetPrivateKeys() [][]byte {
	if x != nil {
		return x.PrivateKeys
	}
	return nil
}

type ProveRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A full transaction with the proof attached
	ProvedTx *transactions.Transaction `protobuf:"bytes,1,opt,name=proved_tx,json=provedTx,proto3" json:"proved_tx,omitempty"`
}

func (x *ProveRawTransactionResponse) Reset() {
	*x = ProveRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveRawTransactionResponse) ProtoMessage() {}

func (x *ProveRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*ProveRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{77}
}

func (x *ProveRawTransactionResponse) GetProvedTx() *transactions.Transaction {
	if x != nil {
		return x.ProvedTx
	}
	return nil
}

type BroadcastRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A fully proven transaction
	Tx *transactions.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *BroadcastRawTransactionRequest) Reset() {
	*x = BroadcastRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRawTransactionRequest) ProtoMessage() {}

func (x *BroadcastRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*BroadcastRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{78}
}

func (x *BroadcastRawTransactionRequest) GetTx() *transactions.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type BroadcastRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastRawTransactionResponse) Reset() {
	*x = BroadcastRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRawTransactionResponse) ProtoMessage() {}

func (x *BroadcastRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*BroadcastRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{79}
}

type StakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The utxos to stake identified by their commitment hashes
	Commitments [][]byte `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *StakeRequest) Reset() {
	*x = StakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeRequest) ProtoMessage() {}

func (x *StakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeRequest.ProtoReflect.Descriptor instead.
func (*StakeRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{80}
}

func (x *StakeRequest) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

type StakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StakeResponse) Reset() {
	*x = StakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeResponse) ProtoMessage() {}

func (x *StakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeResponse.ProtoReflect.Descriptor instead.
func (*StakeResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{81}
}

type SetAutoStakeRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to turn on or off autostaking
	Autostake bool `protobuf:"varint,1,opt,name=autostake,proto3" json:"autostake,omitempty"`
}

func (x *SetAutoStakeRewardsRequest) Reset() {
	*x = SetAutoStakeRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutoStakeRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutoStakeRewardsRequest) ProtoMessage() {}

func (x *SetAutoStakeRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutoStakeRewardsRequest.ProtoReflect.Descriptor instead.
func (*SetAutoStakeRewardsRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{82}
}

func (x *SetAutoStakeRewardsRequest) GetAutostake() bool {
	if x != nil {
		return x.Autostake
	}
	return false
}

type SetAutoStakeRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAutoStakeRewardsResponse) Reset() {
	*x = SetAutoStakeRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutoStakeRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutoStakeRewardsResponse) ProtoMessage() {}

func (x *SetAutoStakeRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutoStakeRewardsResponse.ProtoReflect.Descriptor instead.
func (*SetAutoStakeRewardsResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{83}
}

type SpendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address to send funds to
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount to send
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The fee to use for the transaction.
	// If zero the wallet will use its internal fee policy.
	FeePerKilobyte uint64 `protobuf:"varint,3,opt,name=fee_per_kilobyte,json=feePerKilobyte,proto3" json:"fee_per_kilobyte,omitempty"`
}

func (x *SpendRequest) Reset() {
	*x = SpendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendRequest) ProtoMessage() {}

func (x *SpendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendRequest.ProtoReflect.Descriptor instead.
func (*SpendRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{84}
}

func (x *SpendRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SpendRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpendRequest) GetFeePerKilobyte() uint64 {
	if x != nil {
		return x.FeePerKilobyte
	}
	return 0
}

type SpendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpendResponse) Reset() {
	*x = SpendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendResponse) ProtoMessage() {}

func (x *SpendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendResponse.ProtoReflect.Descriptor instead.
func (*SpendResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{85}
}

// NodeService
type GetHostInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHostInfoRequest) Reset() {
	*x = GetHostInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostInfoRequest) ProtoMessage() {}

func (x *GetHostInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostInfoRequest.ProtoReflect.Descriptor instead.
func (*GetHostInfoRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{86}
}

type GetHostInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host peer ID
	Peer_ID string `protobuf:"bytes,1,opt,name=peer_ID,json=peerID,proto3" json:"peer_ID,omitempty"`
	// A list of multiaddrs that this node is listening on
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// The number of peers this node is connected to
	Peers uint32 `protobuf:"varint,3,opt,name=peers,proto3" json:"peers,omitempty"`
	// Is tx index enabled
	TxIndex bool `protobuf:"varint,4,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Is the wallet server enabled
	WalletServer bool `protobuf:"varint,5,opt,name=wallet_server,json=walletServer,proto3" json:"wallet_server,omitempty"`
}

func (x *GetHostInfoResponse) Reset() {
	*x = GetHostInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostInfoResponse) ProtoMessage() {}

func (x *GetHostInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostInfoResponse.ProtoReflect.Descriptor instead.
func (*GetHostInfoResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{87}
}

func (x *GetHostInfoResponse) GetPeer_ID() string {
	if x != nil {
		return x.Peer_ID
	}
	return ""
}

func (x *GetHostInfoResponse) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *GetHostInfoResponse) GetPeers() uint32 {
	if x != nil {
		return x.Peers
	}
	return 0
}

func (x *GetHostInfoResponse) GetTxIndex() bool {
	if x != nil {
		return x.TxIndex
	}
	return false
}

func (x *GetHostInfoResponse) GetWalletServer() bool {
	if x != nil {
		return x.WalletServer
	}
	return false
}

type GetPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPeersRequest) Reset() {
	*x = GetPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersRequest) ProtoMessage() {}

func (x *GetPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersRequest.ProtoReflect.Descriptor instead.
func (*GetPeersRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{88}
}

type GetPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of peers
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{89}
}

func (x *GetPeersResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type AddPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The peer addr to add. This must be in multiaddr format and include
	// the /p2p/<peerID> field.
	// Ex) /ip4/167.172.126.176/tcp/4001/p2p/12D3KooWHnpVyu9XDeFoAVayqr9hvc9xPqSSHtCSFLEkKgcz5Wro
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{90}
}

func (x *AddPeerRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type AddPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPeerResponse) Reset() {
	*x = AddPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerResponse) ProtoMessage() {}

func (x *AddPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerResponse.ProtoReflect.Descriptor instead.
func (*AddPeerResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{91}
}

type BlockPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID to block
	Peer_ID string `protobuf:"bytes,1,opt,name=peer_ID,json=peerID,proto3" json:"peer_ID,omitempty"`
}

func (x *BlockPeerRequest) Reset() {
	*x = BlockPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPeerRequest) ProtoMessage() {}

func (x *BlockPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPeerRequest.ProtoReflect.Descriptor instead.
func (*BlockPeerRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{92}
}

func (x *BlockPeerRequest) GetPeer_ID() string {
	if x != nil {
		return x.Peer_ID
	}
	return ""
}

type BlockPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockPeerResponse) Reset() {
	*x = BlockPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPeerResponse) ProtoMessage() {}

func (x *BlockPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPeerResponse.ProtoReflect.Descriptor instead.
func (*BlockPeerResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{93}
}

type UnblockPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID to unblock
	Peer_ID string `protobuf:"bytes,1,opt,name=peer_ID,json=peerID,proto3" json:"peer_ID,omitempty"`
}

func (x *UnblockPeerRequest) Reset() {
	*x = UnblockPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockPeerRequest) ProtoMessage() {}

func (x *UnblockPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockPeerRequest.ProtoReflect.Descriptor instead.
func (*UnblockPeerRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{94}
}

func (x *UnblockPeerRequest) GetPeer_ID() string {
	if x != nil {
		return x.Peer_ID
	}
	return ""
}

type UnblockPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockPeerResponse) Reset() {
	*x = UnblockPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockPeerResponse) ProtoMessage() {}

func (x *UnblockPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockPeerResponse.ProtoReflect.Descriptor instead.
func (*UnblockPeerResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{95}
}

type SetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The debug level to set the logging to
	Level SetLogLevelRequest_Level `protobuf:"varint,1,opt,name=level,proto3,enum=pb.SetLogLevelRequest_Level" json:"level,omitempty"`
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{96}
}

func (x *SetLogLevelRequest) GetLevel() SetLogLevelRequest_Level {
	if x != nil {
		return x.Level
	}
	return SetLogLevelRequest_DEBUG
}

type SetLogLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLogLevelResponse) Reset() {
	*x = SetLogLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelResponse) ProtoMessage() {}

func (x *SetLogLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelResponse.ProtoReflect.Descriptor instead.
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{97}
}

type GetMinFeePerKilobyteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinFeePerKilobyteRequest) Reset() {
	*x = GetMinFeePerKilobyteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinFeePerKilobyteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinFeePerKilobyteRequest) ProtoMessage() {}

func (x *GetMinFeePerKilobyteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinFeePerKilobyteRequest.ProtoReflect.Descriptor instead.
func (*GetMinFeePerKilobyteRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{98}
}

type GetMinFeePerKilobyteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee per kilobyte response
	FeePerKilobyte uint64 `protobuf:"varint,1,opt,name=fee_per_kilobyte,json=feePerKilobyte,proto3" json:"fee_per_kilobyte,omitempty"`
}

func (x *GetMinFeePerKilobyteResponse) Reset() {
	*x = GetMinFeePerKilobyteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinFeePerKilobyteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinFeePerKilobyteResponse) ProtoMessage() {}

func (x *GetMinFeePerKilobyteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinFeePerKilobyteResponse.ProtoReflect.Descriptor instead.
func (*GetMinFeePerKilobyteResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{99}
}

func (x *GetMinFeePerKilobyteResponse) GetFeePerKilobyte() uint64 {
	if x != nil {
		return x.FeePerKilobyte
	}
	return 0
}

type SetMinFeePerKilobyteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee per byte to set
	FeePerKilobyte uint64 `protobuf:"varint,1,opt,name=fee_per_kilobyte,json=feePerKilobyte,proto3" json:"fee_per_kilobyte,omitempty"`
}

func (x *SetMinFeePerKilobyteRequest) Reset() {
	*x = SetMinFeePerKilobyteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinFeePerKilobyteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinFeePerKilobyteRequest) ProtoMessage() {}

func (x *SetMinFeePerKilobyteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinFeePerKilobyteRequest.ProtoReflect.Descriptor instead.
func (*SetMinFeePerKilobyteRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{100}
}

func (x *SetMinFeePerKilobyteRequest) GetFeePerKilobyte() uint64 {
	if x != nil {
		return x.FeePerKilobyte
	}
	return 0
}

type SetMinFeePerKilobyteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMinFeePerKilobyteResponse) Reset() {
	*x = SetMinFeePerKilobyteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinFeePerKilobyteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinFeePerKilobyteResponse) ProtoMessage() {}

func (x *SetMinFeePerKilobyteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinFeePerKilobyteResponse.ProtoReflect.Descriptor instead.
func (*SetMinFeePerKilobyteResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{101}
}

type GetMinStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinStakeRequest) Reset() {
	*x = GetMinStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinStakeRequest) ProtoMessage() {}

func (x *GetMinStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinStakeRequest.ProtoReflect.Descriptor instead.
func (*GetMinStakeRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{102}
}

type GetMinStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum stake response
	MinStakeAmount uint64 `protobuf:"varint,1,opt,name=min_stake_amount,json=minStakeAmount,proto3" json:"min_stake_amount,omitempty"`
}

func (x *GetMinStakeResponse) Reset() {
	*x = GetMinStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinStakeResponse) ProtoMessage() {}

func (x *GetMinStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinStakeResponse.ProtoReflect.Descriptor instead.
func (*GetMinStakeResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{103}
}

func (x *GetMinStakeResponse) GetMinStakeAmount() uint64 {
	if x != nil {
		return x.MinStakeAmount
	}
	return 0
}

type SetMinStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum stake amount to set
	MinStakeAmount uint64 `protobuf:"varint,1,opt,name=min_stake_amount,json=minStakeAmount,proto3" json:"min_stake_amount,omitempty"`
}

func (x *SetMinStakeRequest) Reset() {
	*x = SetMinStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinStakeRequest) ProtoMessage() {}

func (x *SetMinStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinStakeRequest.ProtoReflect.Descriptor instead.
func (*SetMinStakeRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{104}
}

func (x *SetMinStakeRequest) GetMinStakeAmount() uint64 {
	if x != nil {
		return x.MinStakeAmount
	}
	return 0
}

type SetMinStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMinStakeResponse) Reset() {
	*x = SetMinStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinStakeResponse) ProtoMessage() {}

func (x *SetMinStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinStakeResponse.ProtoReflect.Descriptor instead.
func (*SetMinStakeResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{105}
}

type GetBlockSizeSoftLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockSizeSoftLimitRequest) Reset() {
	*x = GetBlockSizeSoftLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockSizeSoftLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockSizeSoftLimitRequest) ProtoMessage() {}

func (x *GetBlockSizeSoftLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockSizeSoftLimitRequest.ProtoReflect.Descriptor instead.
func (*GetBlockSizeSoftLimitRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{106}
}

type GetBlockSizeSoftLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block size response
	BlockSize uint32 `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
}

func (x *GetBlockSizeSoftLimitResponse) Reset() {
	*x = GetBlockSizeSoftLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockSizeSoftLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockSizeSoftLimitResponse) ProtoMessage() {}

func (x *GetBlockSizeSoftLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockSizeSoftLimitResponse.ProtoReflect.Descriptor instead.
func (*GetBlockSizeSoftLimitResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{107}
}

func (x *GetBlockSizeSoftLimitResponse) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

type SetBlockSizeSoftLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blocksize to set
	BlockSize uint32 `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
}

func (x *SetBlockSizeSoftLimitRequest) Reset() {
	*x = SetBlockSizeSoftLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlockSizeSoftLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockSizeSoftLimitRequest) ProtoMessage() {}

func (x *SetBlockSizeSoftLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockSizeSoftLimitRequest.ProtoReflect.Descriptor instead.
func (*SetBlockSizeSoftLimitRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{108}
}

func (x *SetBlockSizeSoftLimitRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

type SetBlockSizeSoftLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBlockSizeSoftLimitResponse) Reset() {
	*x = SetBlockSizeSoftLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlockSizeSoftLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockSizeSoftLimitResponse) ProtoMessage() {}

func (x *SetBlockSizeSoftLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockSizeSoftLimitResponse.ProtoReflect.Descriptor instead.
func (*SetBlockSizeSoftLimitResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{109}
}

type GetTreasuryWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTreasuryWhitelistRequest) Reset() {
	*x = GetTreasuryWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreasuryWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreasuryWhitelistRequest) ProtoMessage() {}

func (x *GetTreasuryWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreasuryWhitelistRequest.ProtoReflect.Descriptor instead.
func (*GetTreasuryWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{110}
}

type GetTreasuryWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whitelisted txids
	Txids [][]byte `protobuf:"bytes,1,rep,name=txids,proto3" json:"txids,omitempty"`
}

func (x *GetTreasuryWhitelistResponse) Reset() {
	*x = GetTreasuryWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreasuryWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreasuryWhitelistResponse) ProtoMessage() {}

func (x *GetTreasuryWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreasuryWhitelistResponse.ProtoReflect.Descriptor instead.
func (*GetTreasuryWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{111}
}

func (x *GetTreasuryWhitelistResponse) GetTxids() [][]byte {
	if x != nil {
		return x.Txids
	}
	return nil
}

type UpdateTreasuryWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Txids to add to the whitelist
	Add [][]byte `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	// Txids to remove from the whitelist
	Remove [][]byte `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
}

func (x *UpdateTreasuryWhitelistRequest) Reset() {
	*x = UpdateTreasuryWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreasuryWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreasuryWhitelistRequest) ProtoMessage() {}

func (x *UpdateTreasuryWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreasuryWhitelistRequest.ProtoReflect.Descriptor instead.
func (*UpdateTreasuryWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateTreasuryWhitelistRequest) GetAdd() [][]byte {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *UpdateTreasuryWhitelistRequest) GetRemove() [][]byte {
	if x != nil {
		return x.Remove
	}
	return nil
}

type UpdateTreasuryWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTreasuryWhitelistResponse) Reset() {
	*x = UpdateTreasuryWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreasuryWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreasuryWhitelistResponse) ProtoMessage() {}

func (x *UpdateTreasuryWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreasuryWhitelistResponse.ProtoReflect.Descriptor instead.
func (*UpdateTreasuryWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{113}
}

type ReconsiderBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block ID to reconsider.
	Block_ID []byte `protobuf:"bytes,1,opt,name=block_ID,json=blockID,proto3" json:"block_ID,omitempty"`
	// We likely don't have the block and will have to download it from
	// another peer. You can set the peer here. If empty we will try to find
	// it form a few random peers.
	DownloadPeer string `protobuf:"bytes,2,opt,name=download_peer,json=downloadPeer,proto3" json:"download_peer,omitempty"`
}

func (x *ReconsiderBlockRequest) Reset() {
	*x = ReconsiderBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconsiderBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconsiderBlockRequest) ProtoMessage() {}

func (x *ReconsiderBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconsiderBlockRequest.ProtoReflect.Descriptor instead.
func (*ReconsiderBlockRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{114}
}

func (x *ReconsiderBlockRequest) GetBlock_ID() []byte {
	if x != nil {
		return x.Block_ID
	}
	return nil
}

func (x *ReconsiderBlockRequest) GetDownloadPeer() string {
	if x != nil {
		return x.DownloadPeer
	}
	return ""
}

type ReconsiderBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconsiderBlockResponse) Reset() {
	*x = ReconsiderBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconsiderBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconsiderBlockResponse) ProtoMessage() {}

func (x *ReconsiderBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconsiderBlockResponse.ProtoReflect.Descriptor instead.
func (*ReconsiderBlockResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{115}
}

type RecomputeChainStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecomputeChainStateRequest) Reset() {
	*x = RecomputeChainStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecomputeChainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputeChainStateRequest) ProtoMessage() {}

func (x *RecomputeChainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputeChainStateRequest.ProtoReflect.Descriptor instead.
func (*RecomputeChainStateRequest) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{116}
}

type RecomputeChainStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecomputeChainStateResponse) Reset() {
	*x = RecomputeChainStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecomputeChainStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputeChainStateResponse) ProtoMessage() {}

func (x *RecomputeChainStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputeChainStateResponse.ProtoReflect.Descriptor instead.
func (*RecomputeChainStateResponse) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{117}
}

type TransactionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the transaction has been included in a block.
	Type TransactionNotification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.TransactionNotification_Type" json:"type,omitempty"`
	// Types that are assignable to Transaction:
	//	*TransactionNotification_FinalizedTransaction
	//	*TransactionNotification_UnconfirmedTransaction
	Transaction isTransactionNotification_Transaction `protobuf_oneof:"transaction"`
}

func (x *TransactionNotification) Reset() {
	*x = TransactionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionNotification) ProtoMessage() {}

func (x *TransactionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionNotification.ProtoReflect.Descriptor instead.
func (*TransactionNotification) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{118}
}

func (x *TransactionNotification) GetType() TransactionNotification_Type {
	if x != nil {
		return x.Type
	}
	return TransactionNotification_UNCONFIRMED
}

func (m *TransactionNotification) GetTransaction() isTransactionNotification_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TransactionNotification) GetFinalizedTransaction() *transactions.Transaction {
	if x, ok := x.GetTransaction().(*TransactionNotification_FinalizedTransaction); ok {
		return x.FinalizedTransaction
	}
	return nil
}

func (x *TransactionNotification) GetUnconfirmedTransaction() *MempoolTransaction {
	if x, ok := x.GetTransaction().(*TransactionNotification_UnconfirmedTransaction); ok {
		return x.UnconfirmedTransaction
	}
	return nil
}

type isTransactionNotification_Transaction interface {
	isTransactionNotification_Transaction()
}

type TransactionNotification_FinalizedTransaction struct {
	// A transaction included in a block.
	FinalizedTransaction *transactions.Transaction `protobuf:"bytes,2,opt,name=finalized_transaction,json=finalizedTransaction,proto3,oneof"`
}

type TransactionNotification_UnconfirmedTransaction struct {
	// A transaction in mempool.
	UnconfirmedTransaction *MempoolTransaction `protobuf:"bytes,3,opt,name=unconfirmed_transaction,json=unconfirmedTransaction,proto3,oneof"`
}

func (*TransactionNotification_FinalizedTransaction) isTransactionNotification_Transaction() {}

func (*TransactionNotification_UnconfirmedTransaction) isTransactionNotification_Transaction() {}

type BlockNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BlockInfo (including header data) for the block
	BlockInfo *BlockInfo `protobuf:"bytes,1,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	// The blocks transactions (if requested).
	//
	// The transactions will either be returned in for or just the txids depending
	// on the request.
	Transactions []*TransactionData `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BlockNotification) Reset() {
	*x = BlockNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockNotification) ProtoMessage() {}

func (x *BlockNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockNotification.ProtoReflect.Descriptor instead.
func (*BlockNotification) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{119}
}

func (x *BlockNotification) GetBlockInfo() *BlockInfo {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

func (x *BlockNotification) GetTransactions() []*TransactionData {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type MempoolTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *transactions.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The time when the transaction was added too the pool.
	AddedTime int64 `protobuf:"varint,2,opt,name=added_time,json=addedTime,proto3" json:"added_time,omitempty"`
	// The block height when the transaction was added to the pool.
	AddedHeight int32 `protobuf:"varint,3,opt,name=added_height,json=addedHeight,proto3" json:"added_height,omitempty"`
	// The total fee the transaction pays.
	Fee int64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// The fee per kilobyte the transaction pays.
	FeePerKilobyte int64 `protobuf:"varint,5,opt,name=fee_per_kilobyte,json=feePerKilobyte,proto3" json:"fee_per_kilobyte,omitempty"`
}

func (x *MempoolTransaction) Reset() {
	*x = MempoolTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolTransaction) ProtoMessage() {}

func (x *MempoolTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolTransaction.ProtoReflect.Descriptor instead.
func (*MempoolTransaction) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{120}
}

func (x *MempoolTransaction) GetTransaction() *transactions.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *MempoolTransaction) GetAddedTime() int64 {
	if x != nil {
		return x.AddedTime
	}
	return 0
}

func (x *MempoolTransaction) GetAddedHeight() int32 {
	if x != nil {
		return x.AddedHeight
	}
	return 0
}

func (x *MempoolTransaction) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MempoolTransaction) GetFeePerKilobyte() int64 {
	if x != nil {
		return x.FeePerKilobyte
	}
	return 0
}

type TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxidsOrTxs:
	//	*TransactionData_Transaction_ID
	//	*TransactionData_Transaction
	TxidsOrTxs isTransactionData_TxidsOrTxs `protobuf_oneof:"txids_or_txs"`
}

func (x *TransactionData) Reset() {
	*x = TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionData) ProtoMessage() {}

func (x *TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionData.ProtoReflect.Descriptor instead.
func (*TransactionData) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{121}
}

func (m *TransactionData) GetTxidsOrTxs() isTransactionData_TxidsOrTxs {
	if m != nil {
		return m.TxidsOrTxs
	}
	return nil
}

func (x *TransactionData) GetTransaction_ID() []byte {
	if x, ok := x.GetTxidsOrTxs().(*TransactionData_Transaction_ID); ok {
		return x.Transaction_ID
	}
	return nil
}

func (x *TransactionData) GetTransaction() *transactions.Transaction {
	if x, ok := x.GetTxidsOrTxs().(*TransactionData_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isTransactionData_TxidsOrTxs interface {
	isTransactionData_TxidsOrTxs()
}

type TransactionData_Transaction_ID struct {
	// Just the transaction ID
	Transaction_ID []byte `protobuf:"bytes,1,opt,name=transaction_ID,json=transactionID,proto3,oneof"`
}

type TransactionData_Transaction struct {
	// A marshaled transaction.
	Transaction *transactions.Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*TransactionData_Transaction_ID) isTransactionData_TxidsOrTxs() {}

func (*TransactionData_Transaction) isTransactionData_TxidsOrTxs() {}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the block header.
	Block_ID []byte `protobuf:"bytes,1,opt,name=block_ID,json=blockID,proto3" json:"block_ID,omitempty"`
	// A version number to track software/protocol upgrades.
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// The height of the block in the chain.
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// The block in the chain right before this one.
	Parent []byte `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// The next block in the chain (or nil if this block is the tip).
	Child []byte `protobuf:"bytes,5,opt,name=child,proto3" json:"child,omitempty"`
	// The timestamp of the block. Expressed in seconds since 1970-01-01.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The root of the Merkle Tree built from all transactions in the block.
	TxRoot []byte `protobuf:"bytes,7,opt,name=tx_root,json=txRoot,proto3" json:"tx_root,omitempty"`
	// The peerID of the validator that created the block.
	Producer_ID []byte `protobuf:"bytes,8,opt,name=producer_ID,json=producerID,proto3" json:"producer_ID,omitempty"`
	// The size of the block in bytes.
	Size uint32 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// The number of transactions in the block.
	NumTxs uint32 `protobuf:"varint,10,opt,name=num_txs,json=numTxs,proto3" json:"num_txs,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{122}
}

func (x *BlockInfo) GetBlock_ID() []byte {
	if x != nil {
		return x.Block_ID
	}
	return nil
}

func (x *BlockInfo) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockInfo) GetParent() []byte {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *BlockInfo) GetChild() []byte {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *BlockInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockInfo) GetTxRoot() []byte {
	if x != nil {
		return x.TxRoot
	}
	return nil
}

func (x *BlockInfo) GetProducer_ID() []byte {
	if x != nil {
		return x.Producer_ID
	}
	return nil
}

func (x *BlockInfo) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockInfo) GetNumTxs() uint32 {
	if x != nil {
		return x.NumTxs
	}
	return 0
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The validator ID encoded in bytes.
	Validator_ID []byte `protobuf:"bytes,1,opt,name=validator_ID,json=validatorID,proto3" json:"validator_ID,omitempty"`
	// The number of coins staked by this validator.
	TotalStake uint64 `protobuf:"varint,2,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	// The nullifiers for the utxos the validator has staked.
	Nullifiers [][]byte `protobuf:"bytes,3,rep,name=nullifiers,proto3" json:"nullifiers,omitempty"`
	// The total of any unclaimed validator rewards.
	UnclaimedCoins uint64 `protobuf:"varint,4,opt,name=unclaimed_coins,json=unclaimedCoins,proto3" json:"unclaimed_coins,omitempty"`
	// The number of blocks this validator has created this epoch.
	EpochBlocks uint32 `protobuf:"varint,5,opt,name=epoch_blocks,json=epochBlocks,proto3" json:"epoch_blocks,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{123}
}

func (x *Validator) GetValidator_ID() []byte {
	if x != nil {
		return x.Validator_ID
	}
	return nil
}

func (x *Validator) GetTotalStake() uint64 {
	if x != nil {
		return x.TotalStake
	}
	return 0
}

func (x *Validator) GetNullifiers() [][]byte {
	if x != nil {
		return x.Nullifiers
	}
	return nil
}

func (x *Validator) GetUnclaimedCoins() uint64 {
	if x != nil {
		return x.UnclaimedCoins
	}
	return 0
}

func (x *Validator) GetEpochBlocks() uint32 {
	if x != nil {
		return x.EpochBlocks
	}
	return 0
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commitment associated with the output
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// The amount of coins
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The address that the utxo is associated with
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Whether or not this is a watch only utxo.
	// We canot spend watch only utxos without the
	// private key.
	WatchOnly bool `protobuf:"varint,4,opt,name=watchOnly,proto3" json:"watchOnly,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{124}
}

func (x *Utxo) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *Utxo) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Utxo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Utxo) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

type RawTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction as it appears on the network
	Tx *transactions.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The private (hidden) data for each input
	Inputs []*PrivateInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The private (hidden) data for each output
	Outputs []*PrivateOutput `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *RawTransaction) Reset() {
	*x = RawTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransaction) ProtoMessage() {}

func (x *RawTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransaction.ProtoReflect.Descriptor instead.
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{125}
}

func (x *RawTransaction) GetTx() *transactions.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *RawTransaction) GetInputs() []*PrivateInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *RawTransaction) GetOutputs() []*PrivateOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type PrivateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of the input
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Input salt
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	// Input asset ID
	Asset_ID []byte `protobuf:"bytes,3,opt,name=asset_ID,json=assetID,proto3" json:"asset_ID,omitempty"`
	// Input state
	State []byte `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// The unlocking function commitment
	ScriptCommitment []byte `protobuf:"bytes,5,opt,name=script_commitment,json=scriptCommitment,proto3" json:"script_commitment,omitempty"`
	// The unlocking function parameters
	ScriptParams [][]byte `protobuf:"bytes,6,rep,name=script_params,json=scriptParams,proto3" json:"script_params,omitempty"`
	// The txo proof linking the input
	// commitment to the accumulator
	TxoProof *TxoProof `protobuf:"bytes,7,opt,name=txo_proof,json=txoProof,proto3" json:"txo_proof,omitempty"`
}

func (x *PrivateInput) Reset() {
	*x = PrivateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateInput) ProtoMessage() {}

func (x *PrivateInput) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateInput.ProtoReflect.Descriptor instead.
func (*PrivateInput) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{126}
}

func (x *PrivateInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PrivateInput) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PrivateInput) GetAsset_ID() []byte {
	if x != nil {
		return x.Asset_ID
	}
	return nil
}

func (x *PrivateInput) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PrivateInput) GetScriptCommitment() []byte {
	if x != nil {
		return x.ScriptCommitment
	}
	return nil
}

func (x *PrivateInput) GetScriptParams() [][]byte {
	if x != nil {
		return x.ScriptParams
	}
	return nil
}

func (x *PrivateInput) GetTxoProof() *TxoProof {
	if x != nil {
		return x.TxoProof
	}
	return nil
}

type PrivateOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output amount
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Output salt
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	// Output asset ID
	Asset_ID []byte `protobuf:"bytes,3,opt,name=asset_ID,json=assetID,proto3" json:"asset_ID,omitempty"`
	// Output state
	State []byte `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Output scriptHash
	ScriptHash []byte `protobuf:"bytes,5,opt,name=script_hash,json=scriptHash,proto3" json:"script_hash,omitempty"`
}

func (x *PrivateOutput) Reset() {
	*x = PrivateOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateOutput) ProtoMessage() {}

func (x *PrivateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateOutput.ProtoReflect.Descriptor instead.
func (*PrivateOutput) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{127}
}

func (x *PrivateOutput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PrivateOutput) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PrivateOutput) GetAsset_ID() []byte {
	if x != nil {
		return x.Asset_ID
	}
	return nil
}

func (x *PrivateOutput) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PrivateOutput) GetScriptHash() []byte {
	if x != nil {
		return x.ScriptHash
	}
	return nil
}

type TxoProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commitment this inclusion proof is for
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// The hashes that form the root preimage
	Accumulator [][]byte `protobuf:"bytes,2,rep,name=accumulator,proto3" json:"accumulator,omitempty"`
	// The merkle hashes linking the commitment to the accumulator
	Hashes [][]byte `protobuf:"bytes,3,rep,name=hashes,proto3" json:"hashes,omitempty"`
	// Flags indicate whether a hash in the hash list is left or right.
	// 0 == left, 1 == right.
	Flags uint64 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	// The index of this commitment in the tree
	Index uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TxoProof) Reset() {
	*x = TxoProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxoProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxoProof) ProtoMessage() {}

func (x *TxoProof) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxoProof.ProtoReflect.Descriptor instead.
func (*TxoProof) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{128}
}

func (x *TxoProof) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *TxoProof) GetAccumulator() [][]byte {
	if x != nil {
		return x.Accumulator
	}
	return nil
}

func (x *TxoProof) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *TxoProof) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TxoProof) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Multiaddrs
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{129}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type WalletTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID
	Transaction_ID []byte `protobuf:"bytes,1,opt,name=transaction_ID,json=transactionID,proto3" json:"transaction_ID,omitempty"`
	// The net number of coins coming into the wallet
	// Positive = receive
	// Negative = send
	NetCoins uint64 `protobuf:"varint,2,opt,name=netCoins,proto3" json:"netCoins,omitempty"`
}

func (x *WalletTransaction) Reset() {
	*x = WalletTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransaction) ProtoMessage() {}

func (x *WalletTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransaction.ProtoReflect.Descriptor instead.
func (*WalletTransaction) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{130}
}

func (x *WalletTransaction) GetTransaction_ID() []byte {
	if x != nil {
		return x.Transaction_ID
	}
	return nil
}

func (x *WalletTransaction) GetNetCoins() uint64 {
	if x != nil {
		return x.NetCoins
	}
	return 0
}

type CreateRawTransactionRequest_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CommitmentOrPrivateInput:
	//	*CreateRawTransactionRequest_Input_Commitment
	//	*CreateRawTransactionRequest_Input_Input
	CommitmentOrPrivateInput isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput `protobuf_oneof:"commitment_or_private_input"`
}

func (x *CreateRawTransactionRequest_Input) Reset() {
	*x = CreateRawTransactionRequest_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTransactionRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionRequest_Input) ProtoMessage() {}

func (x *CreateRawTransactionRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionRequest_Input.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionRequest_Input) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{74, 0}
}

func (m *CreateRawTransactionRequest_Input) GetCommitmentOrPrivateInput() isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput {
	if m != nil {
		return m.CommitmentOrPrivateInput
	}
	return nil
}

func (x *CreateRawTransactionRequest_Input) GetCommitment() []byte {
	if x, ok := x.GetCommitmentOrPrivateInput().(*CreateRawTransactionRequest_Input_Commitment); ok {
		return x.Commitment
	}
	return nil
}

func (x *CreateRawTransactionRequest_Input) GetInput() *PrivateInput {
	if x, ok := x.GetCommitmentOrPrivateInput().(*CreateRawTransactionRequest_Input_Input); ok {
		return x.Input
	}
	return nil
}

type isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput interface {
	isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput()
}

type CreateRawTransactionRequest_Input_Commitment struct {
	// This is a utxo commitment known to the wallet
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3,oneof"`
}

type CreateRawTransactionRequest_Input_Input struct {
	// If trying to create a transaction spending a utxo that the
	// wallet does not know about you must provide the full private
	// input data.
	Input *PrivateInput `protobuf:"bytes,2,opt,name=input,proto3,oneof"`
}

func (*CreateRawTransactionRequest_Input_Commitment) isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput() {
}

func (*CreateRawTransactionRequest_Input_Input) isCreateRawTransactionRequest_Input_CommitmentOrPrivateInput() {
}

type CreateRawTransactionRequest_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address to send coins to
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount to send
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateRawTransactionRequest_Output) Reset() {
	*x = CreateRawTransactionRequest_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ilxrpc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTransactionRequest_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionRequest_Output) ProtoMessage() {}

func (x *CreateRawTransactionRequest_Output) ProtoReflect() protoreflect.Message {
	mi := &file_ilxrpc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionRequest_Output.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionRequest_Output) Descriptor() ([]byte, []int) {
	return file_ilxrpc_proto_rawDescGZIP(), []int{74, 1}
}

func (x *CreateRawTransactionRequest_Output) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateRawTransactionRequest_Output) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_ilxrpc_proto protoreflect.FileDescriptor

var file_ilxrpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x6c, 0x78, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x63, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x47, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x53, 0x54,
	0x4e, 0x45, 0x54, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x58,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x6f,
	0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x30, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x62, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x44,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x3e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0x72, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15,
	0x0a, 0x13, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x42, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a,
	0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x62, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x62, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x62, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x51, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x34, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x78, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x78, 0x6f,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x78, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x65, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x11,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x05,
	0x75, 0x74, 0x78, 0x6f, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x63, 0x61,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x6b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x56, 0x69, 0x65, 0x77, 0x4b,
	0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x56,
	0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x22, 0x77, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x73, 0x22, 0x42, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x78, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a,
	0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x03,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6f,
	0x62, 0x79, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x1a, 0x72, 0x0a, 0x05, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x1d, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x3a,
	0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x63,
	0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x48, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x78, 0x22, 0x3e, 0x0a,
	0x1e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x21, 0x0a,
	0x1f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f,
	0x0a, 0x0c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x22,
	0x0f, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x13, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5c, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x06, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62,
	0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f,
	0x62, 0x79, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65,
	0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c,
	0x6f, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x53,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x69, 0x64, 0x73,
	0x22, 0x4a, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x03, 0x61, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x21, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9e, 0x02, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc2,
	0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62,
	0x79, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x78, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x78,
	0x73, 0x22, 0x8b, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x78,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x54, 0x78, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x76, 0x0a,
	0x04, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xe8, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a,
	0x09, 0x74, 0x78, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x08,
	0x74, 0x78, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x6f,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2c, 0x0a, 0x04, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x32, 0xe9, 0x09, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x32, 0xe5, 0x02,
	0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x6f, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x6f, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x88, 0x0f, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x17,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x69, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x56, 0x69, 0x65, 0x77, 0x4b,
	0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xe7, 0x09, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62,
	0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f,
	0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69,
	0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53,
	0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53,
	0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6f, 0x66, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x69, 0x6c, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x69, 0x6c, 0x78, 0x64, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ilxrpc_proto_rawDescOnce sync.Once
	file_ilxrpc_proto_rawDescData = file_ilxrpc_proto_rawDesc
)

func file_ilxrpc_proto_rawDescGZIP() []byte {
	file_ilxrpc_proto_rawDescOnce.Do(func() {
		file_ilxrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ilxrpc_proto_rawDescData)
	})
	return file_ilxrpc_proto_rawDescData
}

var file_ilxrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ilxrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 133)
var file_ilxrpc_proto_goTypes = []interface{}{
	(GetBlockchainInfoResponse_Network)(0),     // 0: pb.GetBlockchainInfoResponse.Network
	(SetLogLevelRequest_Level)(0),              // 1: pb.SetLogLevelRequest.Level
	(TransactionNotification_Type)(0),          // 2: pb.TransactionNotification.Type
	(*GetMempoolInfoRequest)(nil),              // 3: pb.GetMempoolInfoRequest
	(*GetMempoolInfoResponse)(nil),             // 4: pb.GetMempoolInfoResponse
	(*GetMempoolRequest)(nil),                  // 5: pb.GetMempoolRequest
	(*GetMempoolResponse)(nil),                 // 6: pb.GetMempoolResponse
	(*GetBlockchainInfoRequest)(nil),           // 7: pb.GetBlockchainInfoRequest
	(*GetBlockchainInfoResponse)(nil),          // 8: pb.GetBlockchainInfoResponse
	(*GetBlockInfoRequest)(nil),                // 9: pb.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),               // 10: pb.GetBlockInfoResponse
	(*GetBlockRequest)(nil),                    // 11: pb.GetBlockRequest
	(*GetBlockResponse)(nil),                   // 12: pb.GetBlockResponse
	(*GetCompressedBlockRequest)(nil),          // 13: pb.GetCompressedBlockRequest
	(*GetCompressedBlockResponse)(nil),         // 14: pb.GetCompressedBlockResponse
	(*GetHeadersRequest)(nil),                  // 15: pb.GetHeadersRequest
	(*GetHeadersResponse)(nil),                 // 16: pb.GetHeadersResponse
	(*GetCompressedBlocksRequest)(nil),         // 17: pb.GetCompressedBlocksRequest
	(*GetCompressedBlocksResponse)(nil),        // 18: pb.GetCompressedBlocksResponse
	(*GetTransactionRequest)(nil),              // 19: pb.GetTransactionRequest
	(*GetTransactionResponse)(nil),             // 20: pb.GetTransactionResponse
	(*GetMerkleProofRequest)(nil),              // 21: pb.GetMerkleProofRequest
	(*GetMerkleProofResponse)(nil),             // 22: pb.GetMerkleProofResponse
	(*GetValidatorRequest)(nil),                // 23: pb.GetValidatorRequest
	(*GetValidatorResponse)(nil),               // 24: pb.GetValidatorResponse
	(*GetValidatorSetInfoRequest)(nil),         // 25: pb.GetValidatorSetInfoRequest
	(*GetValidatorSetInfoResponse)(nil),        // 26: pb.GetValidatorSetInfoResponse
	(*GetValidatorSetRequest)(nil),             // 27: pb.GetValidatorSetRequest
	(*GetValidatorSetResponse)(nil),            // 28: pb.GetValidatorSetResponse
	(*GetAccumulatorCheckpointRequest)(nil),    // 29: pb.GetAccumulatorCheckpointRequest
	(*GetAccumulatorCheckpointResponse)(nil),   // 30: pb.GetAccumulatorCheckpointResponse
	(*SubmitTransactionRequest)(nil),           // 31: pb.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),          // 32: pb.SubmitTransactionResponse
	(*SubscribeBlocksRequest)(nil),             // 33: pb.SubscribeBlocksRequest
	(*RegisterViewKeyRequest)(nil),             // 34: pb.RegisterViewKeyRequest
	(*RegisterViewKeyResponse)(nil),            // 35: pb.RegisterViewKeyResponse
	(*SubscribeTransactionsRequest)(nil),       // 36: pb.SubscribeTransactionsRequest
	(*GetWalletTransactionsRequest)(nil),       // 37: pb.GetWalletTransactionsRequest
	(*GetWalletTransactionsResponse)(nil),      // 38: pb.GetWalletTransactionsResponse
	(*GetTxoProofRequest)(nil),                 // 39: pb.GetTxoProofRequest
	(*GetTxoProofResponse)(nil),                // 40: pb.GetTxoProofResponse
	(*GetBalanceRequest)(nil),                  // 41: pb.GetBalanceRequest
	(*GetBalanceResponse)(nil),                 // 42: pb.GetBalanceResponse
	(*GetWalletSeedRequest)(nil),               // 43: pb.GetWalletSeedRequest
	(*GetWalletSeedResponse)(nil),              // 44: pb.GetWalletSeedResponse
	(*GetAddressesRequest)(nil),                // 45: pb.GetAddressesRequest
	(*GetAddressesResponse)(nil),               // 46: pb.GetAddressesResponse
	(*GetNewAddressRequest)(nil),               // 47: pb.GetNewAddressRequest
	(*GetNewAddressResponse)(nil),              // 48: pb.GetNewAddressResponse
	(*GetTransactionsRequest)(nil),             // 49: pb.GetTransactionsRequest
	(*GetTransactionsResponse)(nil),            // 50: pb.GetTransactionsResponse
	(*GetUtxosRequest)(nil),                    // 51: pb.GetUtxosRequest
	(*GetUtxosResponse)(nil),                   // 52: pb.GetUtxosResponse
	(*GetPrivateKeysRequest)(nil),              // 53: pb.GetPrivateKeysRequest
	(*GetPrivateKeysResponse)(nil),             // 54: pb.GetPrivateKeysResponse
	(*ImportAddressRequest)(nil),               // 55: pb.ImportAddressRequest
	(*ImportAddressResponse)(nil),              // 56: pb.ImportAddressResponse
	(*CreateMultisigSpendKeypairRequest)(nil),  // 57: pb.CreateMultisigSpendKeypairRequest
	(*CreateMultisigSpendKeypairResponse)(nil), // 58: pb.CreateMultisigSpendKeypairResponse
	(*CreateMultisigViewKeypairRequest)(nil),   // 59: pb.CreateMultisigViewKeypairRequest
	(*CreateMultisigViewKeypairResponse)(nil),  // 60: pb.CreateMultisigViewKeypairResponse
	(*CreateMultisigAddressRequest)(nil),       // 61: pb.CreateMultisigAddressRequest
	(*CreateMultisigAddressResponse)(nil),      // 62: pb.CreateMultisigAddressResponse
	(*CreateMultiSignatureRequest)(nil),        // 63: pb.CreateMultiSignatureRequest
	(*CreateMultiSignatureResponse)(nil),       // 64: pb.CreateMultiSignatureResponse
	(*ProveMultisigRequest)(nil),               // 65: pb.ProveMultisigRequest
	(*ProveMultisigResponse)(nil),              // 66: pb.ProveMultisigResponse
	(*WalletLockRequest)(nil),                  // 67: pb.WalletLockRequest
	(*WalletLockResponse)(nil),                 // 68: pb.WalletLockResponse
	(*WalletUnlockRequest)(nil),                // 69: pb.WalletUnlockRequest
	(*WalletUnlockResponse)(nil),               // 70: pb.WalletUnlockResponse
	(*SetWalletPassphraseRequest)(nil),         // 71: pb.SetWalletPassphraseRequest
	(*SetWalletPassphraseResponse)(nil),        // 72: pb.SetWalletPassphraseResponse
	(*ChangeWalletPassphraseRequest)(nil),      // 73: pb.ChangeWalletPassphraseRequest
	(*ChangeWalletPassphraseResponse)(nil),     // 74: pb.ChangeWalletPassphraseResponse
	(*DeletePrivateKeysRequest)(nil),           // 75: pb.DeletePrivateKeysRequest
	(*DeletePrivateKeysResponse)(nil),          // 76: pb.DeletePrivateKeysResponse
	(*CreateRawTransactionRequest)(nil),        // 77: pb.CreateRawTransactionRequest
	(*CreateRawTransactionResponse)(nil),       // 78: pb.CreateRawTransactionResponse
	(*ProveRawTransactionRequest)(nil),         // 79: pb.ProveRawTransactionRequest
	(*ProveRawTransactionResponse)(nil),        // 80: pb.ProveRawTransactionResponse
	(*BroadcastRawTransactionRequest)(nil),     // 81: pb.BroadcastRawTransactionRequest
	(*BroadcastRawTransactionResponse)(nil),    // 82: pb.BroadcastRawTransactionResponse
	(*StakeRequest)(nil),                       // 83: pb.StakeRequest
	(*StakeResponse)(nil),                      // 84: pb.StakeResponse
	(*SetAutoStakeRewardsRequest)(nil),         // 85: pb.SetAutoStakeRewardsRequest
	(*SetAutoStakeRewardsResponse)(nil),        // 86: pb.SetAutoStakeRewardsResponse
	(*SpendRequest)(nil),                       // 87: pb.SpendRequest
	(*SpendResponse)(nil),                      // 88: pb.SpendResponse
	(*GetHostInfoRequest)(nil),                 // 89: pb.GetHostInfoRequest
	(*GetHostInfoResponse)(nil),                // 90: pb.GetHostInfoResponse
	(*GetPeersRequest)(nil),                    // 91: pb.GetPeersRequest
	(*GetPeersResponse)(nil),                   // 92: pb.GetPeersResponse
	(*AddPeerRequest)(nil),                     // 93: pb.AddPeerRequest
	(*AddPeerResponse)(nil),                    // 94: pb.AddPeerResponse
	(*BlockPeerRequest)(nil),                   // 95: pb.BlockPeerRequest
	(*BlockPeerResponse)(nil),                  // 96: pb.BlockPeerResponse
	(*UnblockPeerRequest)(nil),                 // 97: pb.UnblockPeerRequest
	(*UnblockPeerResponse)(nil),                // 98: pb.UnblockPeerResponse
	(*SetLogLevelRequest)(nil),                 // 99: pb.SetLogLevelRequest
	(*SetLogLevelResponse)(nil),                // 100: pb.SetLogLevelResponse
	(*GetMinFeePerKilobyteRequest)(nil),        // 101: pb.GetMinFeePerKilobyteRequest
	(*GetMinFeePerKilobyteResponse)(nil),       // 102: pb.GetMinFeePerKilobyteResponse
	(*SetMinFeePerKilobyteRequest)(nil),        // 103: pb.SetMinFeePerKilobyteRequest
	(*SetMinFeePerKilobyteResponse)(nil),       // 104: pb.SetMinFeePerKilobyteResponse
	(*GetMinStakeRequest)(nil),                 // 105: pb.GetMinStakeRequest
	(*GetMinStakeResponse)(nil),                // 106: pb.GetMinStakeResponse
	(*SetMinStakeRequest)(nil),                 // 107: pb.SetMinStakeRequest
	(*SetMinStakeResponse)(nil),                // 108: pb.SetMinStakeResponse
	(*GetBlockSizeSoftLimitRequest)(nil),       // 109: pb.GetBlockSizeSoftLimitRequest
	(*GetBlockSizeSoftLimitResponse)(nil),      // 110: pb.GetBlockSizeSoftLimitResponse
	(*SetBlockSizeSoftLimitRequest)(nil),       // 111: pb.SetBlockSizeSoftLimitRequest
	(*SetBlockSizeSoftLimitResponse)(nil),      // 112: pb.SetBlockSizeSoftLimitResponse
	(*GetTreasuryWhitelistRequest)(nil),        // 113: pb.GetTreasuryWhitelistRequest
	(*GetTreasuryWhitelistResponse)(nil),       // 114: pb.GetTreasuryWhitelistResponse
	(*UpdateTreasuryWhitelistRequest)(nil),     // 115: pb.UpdateTreasuryWhitelistRequest
	(*UpdateTreasuryWhitelistResponse)(nil),    // 116: pb.UpdateTreasuryWhitelistResponse
	(*ReconsiderBlockRequest)(nil),             // 117: pb.ReconsiderBlockRequest
	(*ReconsiderBlockResponse)(nil),            // 118: pb.ReconsiderBlockResponse
	(*RecomputeChainStateRequest)(nil),         // 119: pb.RecomputeChainStateRequest
	(*RecomputeChainStateResponse)(nil),        // 120: pb.RecomputeChainStateResponse
	(*TransactionNotification)(nil),            // 121: pb.TransactionNotification
	(*BlockNotification)(nil),                  // 122: pb.BlockNotification
	(*MempoolTransaction)(nil),                 // 123: pb.MempoolTransaction
	(*TransactionData)(nil),                    // 124: pb.TransactionData
	(*BlockInfo)(nil),                          // 125: pb.BlockInfo
	(*Validator)(nil),                          // 126: pb.Validator
	(*Utxo)(nil),                               // 127: pb.Utxo
	(*RawTransaction)(nil),                     // 128: pb.RawTransaction
	(*PrivateInput)(nil),                       // 129: pb.PrivateInput
	(*PrivateOutput)(nil),                      // 130: pb.PrivateOutput
	(*TxoProof)(nil),                           // 131: pb.TxoProof
	(*Peer)(nil),                               // 132: pb.Peer
	(*WalletTransaction)(nil),                  // 133: pb.WalletTransaction
	(*CreateRawTransactionRequest_Input)(nil),  // 134: pb.CreateRawTransactionRequest.Input
	(*CreateRawTransactionRequest_Output)(nil), // 135: pb.CreateRawTransactionRequest.Output
	(*blocks.Block)(nil),                       // 136: Block
	(*blocks.CompressedBlock)(nil),             // 137: CompressedBlock
	(*blocks.BlockHeader)(nil),                 // 138: BlockHeader
	(*transactions.Transaction)(nil),           // 139: Transaction
}
var file_ilxrpc_proto_depIdxs = []int32{
	124, // 0: pb.GetMempoolResponse.transaction_data:type_name -> pb.TransactionData
	0,   // 1: pb.GetBlockchainInfoResponse.network:type_name -> pb.GetBlockchainInfoResponse.Network
	125, // 2: pb.GetBlockInfoResponse.info:type_name -> pb.BlockInfo
	136, // 3: pb.GetBlockResponse.block:type_name -> Block
	137, // 4: pb.GetCompressedBlockResponse.block:type_name -> CompressedBlock
	138, // 5: pb.GetHeadersResponse.headers:type_name -> BlockHeader
	137, // 6: pb.GetCompressedBlocksResponse.blocks:type_name -> CompressedBlock
	139, // 7: pb.GetTransactionResponse.tx:type_name -> Transaction
	125, // 8: pb.GetMerkleProofResponse.block:type_name -> pb.BlockInfo
	126, // 9: pb.GetValidatorResponse.validator:type_name -> pb.Validator
	126, // 10: pb.GetValidatorSetResponse.validators:type_name -> pb.Validator
	139, // 11: pb.SubmitTransactionRequest.transaction:type_name -> Transaction
	139, // 12: pb.GetWalletTransactionsResponse.transactions:type_name -> Transaction
	131, // 13: pb.GetTxoProofResponse.proof:type_name -> pb.TxoProof
	133, // 14: pb.GetTransactionsResponse.txs:type_name -> pb.WalletTransaction
	127, // 15: pb.GetUtxosResponse.utxos:type_name -> pb.Utxo
	139, // 16: pb.CreateMultiSignatureRequest.tx:type_name -> Transaction
	128, // 17: pb.ProveMultisigRequest.tx:type_name -> pb.RawTransaction
	139, // 18: pb.ProveMultisigResponse.proved_tx:type_name -> Transaction
	134, // 19: pb.CreateRawTransactionRequest.inputs:type_name -> pb.CreateRawTransactionRequest.Input
	135, // 20: pb.CreateRawTransactionRequest.outputs:type_name -> pb.CreateRawTransactionRequest.Output
	128, // 21: pb.CreateRawTransactionResponse.tx:type_name -> pb.RawTransaction
	128, // 22: pb.ProveRawTransactionRequest.tx:type_name -> pb.RawTransaction
	139, // 23: pb.ProveRawTransactionResponse.proved_tx:type_name -> Transaction
	139, // 24: pb.BroadcastRawTransactionRequest.tx:type_name -> Transaction
	132, // 25: pb.GetPeersResponse.peers:type_name -> pb.Peer
	1,   // 26: pb.SetLogLevelRequest.level:type_name -> pb.SetLogLevelRequest.Level
	2,   // 27: pb.TransactionNotification.type:type_name -> pb.TransactionNotification.Type
	139, // 28: pb.TransactionNotification.finalized_transaction:type_name -> Transaction
	123, // 29: pb.TransactionNotification.unconfirmed_transaction:type_name -> pb.MempoolTransaction
	125, // 30: pb.BlockNotification.block_info:type_name -> pb.BlockInfo
	124, // 31: pb.BlockNotification.transactions:type_name -> pb.TransactionData
	139, // 32: pb.MempoolTransaction.transaction:type_name -> Transaction
	139, // 33: pb.TransactionData.transaction:type_name -> Transaction
	139, // 34: pb.RawTransaction.tx:type_name -> Transaction
	129, // 35: pb.RawTransaction.inputs:type_name -> pb.PrivateInput
	130, // 36: pb.RawTransaction.outputs:type_name -> pb.PrivateOutput
	131, // 37: pb.PrivateInput.txo_proof:type_name -> pb.TxoProof
	129, // 38: pb.CreateRawTransactionRequest.Input.input:type_name -> pb.PrivateInput
	3,   // 39: pb.BlockchainService.GetMempoolInfo:input_type -> pb.GetMempoolInfoRequest
	5,   // 40: pb.BlockchainService.GetMempool:input_type -> pb.GetMempoolRequest
	7,   // 41: pb.BlockchainService.GetBlockchainInfo:input_type -> pb.GetBlockchainInfoRequest
	9,   // 42: pb.BlockchainService.GetBlockInfo:input_type -> pb.GetBlockInfoRequest
	11,  // 43: pb.BlockchainService.GetBlock:input_type -> pb.GetBlockRequest
	13,  // 44: pb.BlockchainService.GetCompressedBlock:input_type -> pb.GetCompressedBlockRequest
	15,  // 45: pb.BlockchainService.GetHeaders:input_type -> pb.GetHeadersRequest
	17,  // 46: pb.BlockchainService.GetCompressedBlocks:input_type -> pb.GetCompressedBlocksRequest
	19,  // 47: pb.BlockchainService.GetTransaction:input_type -> pb.GetTransactionRequest
	21,  // 48: pb.BlockchainService.GetMerkleProof:input_type -> pb.GetMerkleProofRequest
	23,  // 49: pb.BlockchainService.GetValidator:input_type -> pb.GetValidatorRequest
	25,  // 50: pb.BlockchainService.GetValidatorSetInfo:input_type -> pb.GetValidatorSetInfoRequest
	27,  // 51: pb.BlockchainService.GetValidatorSet:input_type -> pb.GetValidatorSetRequest
	29,  // 52: pb.BlockchainService.GetAccumulatorCheckpoint:input_type -> pb.GetAccumulatorCheckpointRequest
	31,  // 53: pb.BlockchainService.SubmitTransaction:input_type -> pb.SubmitTransactionRequest
	33,  // 54: pb.BlockchainService.SubscribeBlocks:input_type -> pb.SubscribeBlocksRequest
	34,  // 55: pb.WalletServerService.RegisterViewKey:input_type -> pb.RegisterViewKeyRequest
	36,  // 56: pb.WalletServerService.SubscribeTransactions:input_type -> pb.SubscribeTransactionsRequest
	37,  // 57: pb.WalletServerService.GetWalletTransactions:input_type -> pb.GetWalletTransactionsRequest
	39,  // 58: pb.WalletServerService.GetTxoProof:input_type -> pb.GetTxoProofRequest
	41,  // 59: pb.WalletService.GetBalance:input_type -> pb.GetBalanceRequest
	43,  // 60: pb.WalletService.GetWalletSeed:input_type -> pb.GetWalletSeedRequest
	45,  // 61: pb.WalletService.GetAddresses:input_type -> pb.GetAddressesRequest
	47,  // 62: pb.WalletService.GetNewAddress:input_type -> pb.GetNewAddressRequest
	49,  // 63: pb.WalletService.GetTransactions:input_type -> pb.GetTransactionsRequest
	51,  // 64: pb.WalletService.GetUtxos:input_type -> pb.GetUtxosRequest
	53,  // 65: pb.WalletService.GetPrivateKeys:input_type -> pb.GetPrivateKeysRequest
	55,  // 66: pb.WalletService.ImportAddress:input_type -> pb.ImportAddressRequest
	57,  // 67: pb.WalletService.CreateMultisigSpendKeypair:input_type -> pb.CreateMultisigSpendKeypairRequest
	59,  // 68: pb.WalletService.CreateMultisigViewKeypair:input_type -> pb.CreateMultisigViewKeypairRequest
	61,  // 69: pb.WalletService.CreateMultisigAddress:input_type -> pb.CreateMultisigAddressRequest
	63,  // 70: pb.WalletService.CreateMultiSignature:input_type -> pb.CreateMultiSignatureRequest
	65,  // 71: pb.WalletService.ProveMultisig:input_type -> pb.ProveMultisigRequest
	67,  // 72: pb.WalletService.WalletLock:input_type -> pb.WalletLockRequest
	69,  // 73: pb.WalletService.WalletUnlock:input_type -> pb.WalletUnlockRequest
	71,  // 74: pb.WalletService.SetWalletPassphrase:input_type -> pb.SetWalletPassphraseRequest
	73,  // 75: pb.WalletService.ChangeWalletPassphrase:input_type -> pb.ChangeWalletPassphraseRequest
	75,  // 76: pb.WalletService.DeletePrivateKeys:input_type -> pb.DeletePrivateKeysRequest
	77,  // 77: pb.WalletService.CreateRawTransaction:input_type -> pb.CreateRawTransactionRequest
	79,  // 78: pb.WalletService.ProveRawTransaction:input_type -> pb.ProveRawTransactionRequest
	81,  // 79: pb.WalletService.BroadcastRawTransaction:input_type -> pb.BroadcastRawTransactionRequest
	83,  // 80: pb.WalletService.Stake:input_type -> pb.StakeRequest
	85,  // 81: pb.WalletService.SetAutoStakeRewards:input_type -> pb.SetAutoStakeRewardsRequest
	87,  // 82: pb.WalletService.Spend:input_type -> pb.SpendRequest
	89,  // 83: pb.NodeService.GetHostInfo:input_type -> pb.GetHostInfoRequest
	91,  // 84: pb.NodeService.GetPeers:input_type -> pb.GetPeersRequest
	93,  // 85: pb.NodeService.AddPeer:input_type -> pb.AddPeerRequest
	95,  // 86: pb.NodeService.BlockPeer:input_type -> pb.BlockPeerRequest
	97,  // 87: pb.NodeService.UnblockPeer:input_type -> pb.UnblockPeerRequest
	99,  // 88: pb.NodeService.SetLogLevel:input_type -> pb.SetLogLevelRequest
	101, // 89: pb.NodeService.GetMinFeePerKilobyte:input_type -> pb.GetMinFeePerKilobyteRequest
	103, // 90: pb.NodeService.SetMinFeePerKilobyte:input_type -> pb.SetMinFeePerKilobyteRequest
	105, // 91: pb.NodeService.GetMinStake:input_type -> pb.GetMinStakeRequest
	107, // 92: pb.NodeService.SetMinStake:input_type -> pb.SetMinStakeRequest
	109, // 93: pb.NodeService.GetBlockSizeSoftLimit:input_type -> pb.GetBlockSizeSoftLimitRequest
	111, // 94: pb.NodeService.SetBlockSizeSoftLimit:input_type -> pb.SetBlockSizeSoftLimitRequest
	113, // 95: pb.NodeService.GetTreasuryWhitelist:input_type -> pb.GetTreasuryWhitelistRequest
	115, // 96: pb.NodeService.UpdateTreasuryWhitelist:input_type -> pb.UpdateTreasuryWhitelistRequest
	117, // 97: pb.NodeService.ReconsiderBlock:input_type -> pb.ReconsiderBlockRequest
	119, // 98: pb.NodeService.RecomputeChainState:input_type -> pb.RecomputeChainStateRequest
	4,   // 99: pb.BlockchainService.GetMempoolInfo:output_type -> pb.GetMempoolInfoResponse
	6,   // 100: pb.BlockchainService.GetMempool:output_type -> pb.GetMempoolResponse
	8,   // 101: pb.BlockchainService.GetBlockchainInfo:output_type -> pb.GetBlockchainInfoResponse
	10,  // 102: pb.BlockchainService.GetBlockInfo:output_type -> pb.GetBlockInfoResponse
	12,  // 103: pb.BlockchainService.GetBlock:output_type -> pb.GetBlockResponse
	14,  // 104: pb.BlockchainService.GetCompressedBlock:output_type -> pb.GetCompressedBlockResponse
	16,  // 105: pb.BlockchainService.GetHeaders:output_type -> pb.GetHeadersResponse
	18,  // 106: pb.BlockchainService.GetCompressedBlocks:output_type -> pb.GetCompressedBlocksResponse
	20,  // 107: pb.BlockchainService.GetTransaction:output_type -> pb.GetTransactionResponse
	22,  // 108: pb.BlockchainService.GetMerkleProof:output_type -> pb.GetMerkleProofResponse
	24,  // 109: pb.BlockchainService.GetValidator:output_type -> pb.GetValidatorResponse
	26,  // 110: pb.BlockchainService.GetValidatorSetInfo:output_type -> pb.GetValidatorSetInfoResponse
	28,  // 111: pb.BlockchainService.GetValidatorSet:output_type -> pb.GetValidatorSetResponse
	30,  // 112: pb.BlockchainService.GetAccumulatorCheckpoint:output_type -> pb.GetAccumulatorCheckpointResponse
	32,  // 113: pb.BlockchainService.SubmitTransaction:output_type -> pb.SubmitTransactionResponse
	122, // 114: pb.BlockchainService.SubscribeBlocks:output_type -> pb.BlockNotification
	120, // 115: pb.WalletServerService.RegisterViewKey:output_type -> pb.RecomputeChainStateResponse
	121, // 116: pb.WalletServerService.SubscribeTransactions:output_type -> pb.TransactionNotification
	38,  // 117: pb.WalletServerService.GetWalletTransactions:output_type -> pb.GetWalletTransactionsResponse
	40,  // 118: pb.WalletServerService.GetTxoProof:output_type -> pb.GetTxoProofResponse
	42,  // 119: pb.WalletService.GetBalance:output_type -> pb.GetBalanceResponse
	44,  // 120: pb.WalletService.GetWalletSeed:output_type -> pb.GetWalletSeedResponse
	46,  // 121: pb.WalletService.GetAddresses:output_type -> pb.GetAddressesResponse
	48,  // 122: pb.WalletService.GetNewAddress:output_type -> pb.GetNewAddressResponse
	50,  // 123: pb.WalletService.GetTransactions:output_type -> pb.GetTransactionsResponse
	52,  // 124: pb.WalletService.GetUtxos:output_type -> pb.GetUtxosResponse
	54,  // 125: pb.WalletService.GetPrivateKeys:output_type -> pb.GetPrivateKeysResponse
	56,  // 126: pb.WalletService.ImportAddress:output_type -> pb.ImportAddressResponse
	58,  // 127: pb.WalletService.CreateMultisigSpendKeypair:output_type -> pb.CreateMultisigSpendKeypairResponse
	60,  // 128: pb.WalletService.CreateMultisigViewKeypair:output_type -> pb.CreateMultisigViewKeypairResponse
	62,  // 129: pb.WalletService.CreateMultisigAddress:output_type -> pb.CreateMultisigAddressResponse
	64,  // 130: pb.WalletService.CreateMultiSignature:output_type -> pb.CreateMultiSignatureResponse
	66,  // 131: pb.WalletService.ProveMultisig:output_type -> pb.ProveMultisigResponse
	68,  // 132: pb.WalletService.WalletLock:output_type -> pb.WalletLockResponse
	70,  // 133: pb.WalletService.WalletUnlock:output_type -> pb.WalletUnlockResponse
	72,  // 134: pb.WalletService.SetWalletPassphrase:output_type -> pb.SetWalletPassphraseResponse
	74,  // 135: pb.WalletService.ChangeWalletPassphrase:output_type -> pb.ChangeWalletPassphraseResponse
	76,  // 136: pb.WalletService.DeletePrivateKeys:output_type -> pb.DeletePrivateKeysResponse
	78,  // 137: pb.WalletService.CreateRawTransaction:output_type -> pb.CreateRawTransactionResponse
	79,  // 138: pb.WalletService.ProveRawTransaction:output_type -> pb.ProveRawTransactionRequest
	82,  // 139: pb.WalletService.BroadcastRawTransaction:output_type -> pb.BroadcastRawTransactionResponse
	84,  // 140: pb.WalletService.Stake:output_type -> pb.StakeResponse
	86,  // 141: pb.WalletService.SetAutoStakeRewards:output_type -> pb.SetAutoStakeRewardsResponse
	88,  // 142: pb.WalletService.Spend:output_type -> pb.SpendResponse
	90,  // 143: pb.NodeService.GetHostInfo:output_type -> pb.GetHostInfoResponse
	92,  // 144: pb.NodeService.GetPeers:output_type -> pb.GetPeersResponse
	94,  // 145: pb.NodeService.AddPeer:output_type -> pb.AddPeerResponse
	96,  // 146: pb.NodeService.BlockPeer:output_type -> pb.BlockPeerResponse
	98,  // 147: pb.NodeService.UnblockPeer:output_type -> pb.UnblockPeerResponse
	100, // 148: pb.NodeService.SetLogLevel:output_type -> pb.SetLogLevelResponse
	102, // 149: pb.NodeService.GetMinFeePerKilobyte:output_type -> pb.GetMinFeePerKilobyteResponse
	104, // 150: pb.NodeService.SetMinFeePerKilobyte:output_type -> pb.SetMinFeePerKilobyteResponse
	106, // 151: pb.NodeService.GetMinStake:output_type -> pb.GetMinStakeResponse
	108, // 152: pb.NodeService.SetMinStake:output_type -> pb.SetMinStakeResponse
	110, // 153: pb.NodeService.GetBlockSizeSoftLimit:output_type -> pb.GetBlockSizeSoftLimitResponse
	112, // 154: pb.NodeService.SetBlockSizeSoftLimit:output_type -> pb.SetBlockSizeSoftLimitResponse
	114, // 155: pb.NodeService.GetTreasuryWhitelist:output_type -> pb.GetTreasuryWhitelistResponse
	116, // 156: pb.NodeService.UpdateTreasuryWhitelist:output_type -> pb.UpdateTreasuryWhitelistResponse
	118, // 157: pb.NodeService.ReconsiderBlock:output_type -> pb.ReconsiderBlockResponse
	120, // 158: pb.NodeService.RecomputeChainState:output_type -> pb.RecomputeChainStateResponse
	99,  // [99:159] is the sub-list for method output_type
	39,  // [39:99] is the sub-list for method input_type
	39,  // [39:39] is the sub-list for extension type_name
	39,  // [39:39] is the sub-list for extension extendee
	0,   // [0:39] is the sub-list for field type_name
}

func init() { file_ilxrpc_proto_init() }
func file_ilxrpc_proto_init() {
	if File_ilxrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ilxrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompressedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompressedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompressedBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompressedBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccumulatorCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccumulatorCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterViewKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterViewKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxoProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxoProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigSpendKeypairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigSpendKeypairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigViewKeypairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigViewKeypairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultiSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultiSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveMultisigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveMultisigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletUnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletUnlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWalletPassphraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWalletPassphraseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeWalletPassphraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeWalletPassphraseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrivateKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrivateKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutoStakeRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutoStakeRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinFeePerKilobyteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinFeePerKilobyteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinFeePerKilobyteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinFeePerKilobyteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockSizeSoftLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockSizeSoftLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlockSizeSoftLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlockSizeSoftLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreasuryWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreasuryWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreasuryWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreasuryWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconsiderBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconsiderBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecomputeChainStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecomputeChainStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxoProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTransactionRequest_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ilxrpc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTransactionRequest_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ilxrpc_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetBlockInfoRequest_Block_ID)(nil),
		(*GetBlockInfoRequest_Height)(nil),
	}
	file_ilxrpc_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetBlockRequest_Block_ID)(nil),
		(*GetBlockRequest_Height)(nil),
	}
	file_ilxrpc_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetCompressedBlockRequest_Block_ID)(nil),
		(*GetCompressedBlockRequest_Height)(nil),
	}
	file_ilxrpc_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*GetAccumulatorCheckpointRequest_Height)(nil),
		(*GetAccumulatorCheckpointRequest_Timestamp)(nil),
	}
	file_ilxrpc_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*GetWalletTransactionsRequest_Block_ID)(nil),
		(*GetWalletTransactionsRequest_Height)(nil),
	}
	file_ilxrpc_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*CreateMultiSignatureRequest_Tx)(nil),
		(*CreateMultiSignatureRequest_Sighash)(nil),
	}
	file_ilxrpc_proto_msgTypes[118].OneofWrappers = []interface{}{
		(*TransactionNotification_FinalizedTransaction)(nil),
		(*TransactionNotification_UnconfirmedTransaction)(nil),
	}
	file_ilxrpc_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*TransactionData_Transaction_ID)(nil),
		(*TransactionData_Transaction)(nil),
	}
	file_ilxrpc_proto_msgTypes[131].OneofWrappers = []interface{}{
		(*CreateRawTransactionRequest_Input_Commitment)(nil),
		(*CreateRawTransactionRequest_Input_Input)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ilxrpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   133,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_ilxrpc_proto_goTypes,
		DependencyIndexes: file_ilxrpc_proto_depIdxs,
		EnumInfos:         file_ilxrpc_proto_enumTypes,
		MessageInfos:      file_ilxrpc_proto_msgTypes,
	}.Build()
	File_ilxrpc_proto = out.File
	file_ilxrpc_proto_rawDesc = nil
	file_ilxrpc_proto_goTypes = nil
	file_ilxrpc_proto_depIdxs = nil
}
